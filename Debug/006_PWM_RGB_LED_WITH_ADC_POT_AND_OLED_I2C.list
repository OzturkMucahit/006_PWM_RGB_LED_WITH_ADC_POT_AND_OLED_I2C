
006_PWM_RGB_LED_WITH_ADC_POT_AND_OLED_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000548  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005c0  200005c0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e36d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e21  00000000  00000000  0002e415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022caa  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a00  00000000  00000000  00054a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d88f7  00000000  00000000  0006542a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dd21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fdc  00000000  00000000  0013dd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004dec 	.word	0x08004dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004dec 	.word	0x08004dec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f001 f8e4 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 fafc 	bl	8000b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fc9c 	bl	8000ebc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 fb62 	bl	8000c4c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000588:	f000 fbb2 	bl	8000cf0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800058c:	f000 fbde 	bl	8000d4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000590:	f000 fd2a 	bl	8000fe8 <ssd1306_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		// R Channel Start
 8000594:	2100      	movs	r1, #0
 8000596:	4879      	ldr	r0, [pc, #484]	; (800077c <main+0x208>)
 8000598:	f003 f958 	bl	800384c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		// G Channel Start
 800059c:	2104      	movs	r1, #4
 800059e:	4877      	ldr	r0, [pc, #476]	; (800077c <main+0x208>)
 80005a0:	f003 f954 	bl	800384c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// B Channel Start
 80005a4:	2108      	movs	r1, #8
 80005a6:	4875      	ldr	r0, [pc, #468]	; (800077c <main+0x208>)
 80005a8:	f003 f950 	bl	800384c <HAL_TIM_PWM_Start>
  adc_value = 0;								// With first energy ADC_value = 0
 80005ac:	4b74      	ldr	r3, [pc, #464]	; (8000780 <main+0x20c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
  adc_value_R = 0; adc_value_G = 0; adc_value_B = 0;
 80005b2:	4b74      	ldr	r3, [pc, #464]	; (8000784 <main+0x210>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	801a      	strh	r2, [r3, #0]
 80005b8:	4b73      	ldr	r3, [pc, #460]	; (8000788 <main+0x214>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	801a      	strh	r2, [r3, #0]
 80005be:	4b73      	ldr	r3, [pc, #460]	; (800078c <main+0x218>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]
  oled_R = 0; oled_G = 0; oled_B = 0;
 80005c4:	4b72      	ldr	r3, [pc, #456]	; (8000790 <main+0x21c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
 80005ca:	4b72      	ldr	r3, [pc, #456]	; (8000794 <main+0x220>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	801a      	strh	r2, [r3, #0]
 80005d0:	4b71      	ldr	r3, [pc, #452]	; (8000798 <main+0x224>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
  count = 0;
 80005d6:	4b71      	ldr	r3, [pc, #452]	; (800079c <main+0x228>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
  color_sr = 1;
 80005dc:	4b70      	ldr	r3, [pc, #448]	; (80007a0 <main+0x22c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);								// Start the ADC1.
 80005e2:	4870      	ldr	r0, [pc, #448]	; (80007a4 <main+0x230>)
 80005e4:	f001 f988 	bl	80018f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); 	// Using ADC with polling mode.
 80005e8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ec:	486d      	ldr	r0, [pc, #436]	; (80007a4 <main+0x230>)
 80005ee:	f001 fa55 	bl	8001a9c <HAL_ADC_PollForConversion>
//	  adc_value = HAL_ADC_GetValue(&hadc1);					// Get the ADC value in polling mode.

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)){				// Push the button_2
 80005f2:	2120      	movs	r1, #32
 80005f4:	486c      	ldr	r0, [pc, #432]	; (80007a8 <main+0x234>)
 80005f6:	f001 ff89 	bl	800250c <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <main+0x92>
		  color_sr = 2;
 8000600:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <main+0x22c>)
 8000602:	2202      	movs	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
	  }

/****  Asagida belirtilen kosul sadece button_2 kosulundan önce belirtilmis olsaydi c program akış hiyerarşisi ve calisma hizinden dolayı belirtilen islem gerceklesmezdi  ****/
	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))){		//  Push both of the buttons (button_1 + button_2)
 8000606:	2108      	movs	r1, #8
 8000608:	4867      	ldr	r0, [pc, #412]	; (80007a8 <main+0x234>)
 800060a:	f001 ff7f 	bl	800250c <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00c      	beq.n	800062e <main+0xba>
 8000614:	2120      	movs	r1, #32
 8000616:	4864      	ldr	r0, [pc, #400]	; (80007a8 <main+0x234>)
 8000618:	f001 ff78 	bl	800250c <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <main+0xba>
		  ssd1306_Fill(Black);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fd4a 	bl	80010bc <ssd1306_Fill>
		  color_sr = 1;
 8000628:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <main+0x22c>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
	  }

	  switch (color_sr)
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <main+0x22c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d003      	beq.n	800063e <main+0xca>
 8000636:	2b02      	cmp	r3, #2
 8000638:	f000 8206 	beq.w	8000a48 <main+0x4d4>
 800063c:	e280      	b.n	8000b40 <main+0x5cc>
	  {
	  case 1:
		  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){				// GPIOA_Pin_3 == 1 it means if you push button_1, runing in this if function.
 800063e:	2108      	movs	r1, #8
 8000640:	4859      	ldr	r0, [pc, #356]	; (80007a8 <main+0x234>)
 8000642:	f001 ff63 	bl	800250c <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d007      	beq.n	800065c <main+0xe8>
			  HAL_Delay(200);									// Added delay function for count value increase one by one.
 800064c:	20c8      	movs	r0, #200	; 0xc8
 800064e:	f001 f8eb 	bl	8001828 <HAL_Delay>
			  count ++;
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <main+0x228>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a50      	ldr	r2, [pc, #320]	; (800079c <main+0x228>)
 800065a:	6013      	str	r3, [r2, #0]
		  }

		  if (count%3 == 0){													// Case 1 => Set the Red colour.
 800065c:	4b4f      	ldr	r3, [pc, #316]	; (800079c <main+0x228>)
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	4b52      	ldr	r3, [pc, #328]	; (80007ac <main+0x238>)
 8000662:	fb83 3201 	smull	r3, r2, r3, r1
 8000666:	17cb      	asrs	r3, r1, #31
 8000668:	1ad2      	subs	r2, r2, r3
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	1aca      	subs	r2, r1, r3
 8000672:	2a00      	cmp	r2, #0
 8000674:	f040 80a8 	bne.w	80007c8 <main+0x254>
	  		  adc_value_R = HAL_ADC_GetValue(&hadc1);
 8000678:	484a      	ldr	r0, [pc, #296]	; (80007a4 <main+0x230>)
 800067a:	f001 fa9a 	bl	8001bb2 <HAL_ADC_GetValue>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b40      	ldr	r3, [pc, #256]	; (8000784 <main+0x210>)
 8000684:	801a      	strh	r2, [r3, #0]
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value_R);		// Write the value in TIM_PWM_Ch1
 8000686:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <main+0x210>)
 8000688:	881a      	ldrh	r2, [r3, #0]
 800068a:	4b3c      	ldr	r3, [pc, #240]	; (800077c <main+0x208>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	635a      	str	r2, [r3, #52]	; 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, adc_value_G);		// Write the value in TIM_PWM_Ch1
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <main+0x214>)
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x208>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	639a      	str	r2, [r3, #56]	; 0x38
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, adc_value_B);		// Write the value in TIM_PWM_Ch1
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <main+0x218>)
 800069c:	881a      	ldrh	r2, [r3, #0]
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <main+0x208>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
	  		  HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f001 f8bf 	bl	8001828 <HAL_Delay>

	  		  ssd1306_Fill(Black);												// If don't use this the Oled display showing 2 digit value like 3 digit value. (10 is like 100)
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fd06 	bl	80010bc <ssd1306_Fill>
	  		  oled_R = (adc_value_R*255) / 4095;								// oled_R value is in the range of 0-255
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <main+0x210>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	4a3c      	ldr	r2, [pc, #240]	; (80007b0 <main+0x23c>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	441a      	add	r2, r3
 80006c4:	12d2      	asrs	r2, r2, #11
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <main+0x21c>)
 80006ce:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Red = %d", oled_R);								// Write in str_RGB
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <main+0x21c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4937      	ldr	r1, [pc, #220]	; (80007b4 <main+0x240>)
 80006d8:	4837      	ldr	r0, [pc, #220]	; (80007b8 <main+0x244>)
 80006da:	f003 ff27 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,5);
 80006de:	2105      	movs	r1, #5
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 fe39 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 80006e6:	4a35      	ldr	r2, [pc, #212]	; (80007bc <main+0x248>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	ca06      	ldmia	r2, {r1, r2}
 80006ec:	4832      	ldr	r0, [pc, #200]	; (80007b8 <main+0x244>)
 80006ee:	f000 fe0d 	bl	800130c <ssd1306_WriteString>
	  		  oled_G = (adc_value_G*255) / 4095;								// oled_G value is in the range of 0-255
 80006f2:	4b25      	ldr	r3, [pc, #148]	; (8000788 <main+0x214>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	4613      	mov	r3, r2
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	1a9b      	subs	r3, r3, r2
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <main+0x23c>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	441a      	add	r2, r3
 8000706:	12d2      	asrs	r2, r2, #11
 8000708:	17db      	asrs	r3, r3, #31
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <main+0x220>)
 8000710:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Green = %d", oled_G);
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <main+0x220>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4929      	ldr	r1, [pc, #164]	; (80007c0 <main+0x24c>)
 800071a:	4827      	ldr	r0, [pc, #156]	; (80007b8 <main+0x244>)
 800071c:	f003 ff06 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,25);
 8000720:	2119      	movs	r1, #25
 8000722:	2005      	movs	r0, #5
 8000724:	f000 fe18 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 8000728:	4a24      	ldr	r2, [pc, #144]	; (80007bc <main+0x248>)
 800072a:	2301      	movs	r3, #1
 800072c:	ca06      	ldmia	r2, {r1, r2}
 800072e:	4822      	ldr	r0, [pc, #136]	; (80007b8 <main+0x244>)
 8000730:	f000 fdec 	bl	800130c <ssd1306_WriteString>
	  		  oled_B = (adc_value_B*255) / 4095;								// oled_B value is in the range of 0-255
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <main+0x218>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4613      	mov	r3, r2
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <main+0x23c>)
 8000742:	fb82 1203 	smull	r1, r2, r2, r3
 8000746:	441a      	add	r2, r3
 8000748:	12d2      	asrs	r2, r2, #11
 800074a:	17db      	asrs	r3, r3, #31
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <main+0x224>)
 8000752:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Blue = %d", oled_B);
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <main+0x224>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	491a      	ldr	r1, [pc, #104]	; (80007c4 <main+0x250>)
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0x244>)
 800075e:	f003 fee5 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,45);
 8000762:	212d      	movs	r1, #45	; 0x2d
 8000764:	2005      	movs	r0, #5
 8000766:	f000 fdf7 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <main+0x248>)
 800076c:	2301      	movs	r3, #1
 800076e:	ca06      	ldmia	r2, {r1, r2}
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <main+0x244>)
 8000772:	f000 fdcb 	bl	800130c <ssd1306_WriteString>
	  		  ssd1306_UpdateScreen();
 8000776:	f000 fcc5 	bl	8001104 <ssd1306_UpdateScreen>
	  		  ssd1306_SetCursor(5,45);
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
	  		  ssd1306_UpdateScreen();
		  	  }

	  break;
 800077a:	e1e0      	b.n	8000b3e <main+0x5ca>
 800077c:	20000130 	.word	0x20000130
 8000780:	20000178 	.word	0x20000178
 8000784:	2000017a 	.word	0x2000017a
 8000788:	2000017c 	.word	0x2000017c
 800078c:	2000017e 	.word	0x2000017e
 8000790:	20000180 	.word	0x20000180
 8000794:	20000182 	.word	0x20000182
 8000798:	20000184 	.word	0x20000184
 800079c:	20000188 	.word	0x20000188
 80007a0:	2000018c 	.word	0x2000018c
 80007a4:	20000094 	.word	0x20000094
 80007a8:	40020000 	.word	0x40020000
 80007ac:	55555556 	.word	0x55555556
 80007b0:	80080081 	.word	0x80080081
 80007b4:	08004e04 	.word	0x08004e04
 80007b8:	20000190 	.word	0x20000190
 80007bc:	20000000 	.word	0x20000000
 80007c0:	08004e10 	.word	0x08004e10
 80007c4:	08004e1c 	.word	0x08004e1c
		  else if (count%3 == 1){												// Case 2 => Set the Green colour.
 80007c8:	4b8f      	ldr	r3, [pc, #572]	; (8000a08 <main+0x494>)
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	4b8f      	ldr	r3, [pc, #572]	; (8000a0c <main+0x498>)
 80007ce:	fb83 3201 	smull	r3, r2, r3, r1
 80007d2:	17cb      	asrs	r3, r1, #31
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	1aca      	subs	r2, r1, r3
 80007de:	2a01      	cmp	r2, #1
 80007e0:	f040 8082 	bne.w	80008e8 <main+0x374>
	  		  adc_value_G = HAL_ADC_GetValue(&hadc1);
 80007e4:	488a      	ldr	r0, [pc, #552]	; (8000a10 <main+0x49c>)
 80007e6:	f001 f9e4 	bl	8001bb2 <HAL_ADC_GetValue>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b89      	ldr	r3, [pc, #548]	; (8000a14 <main+0x4a0>)
 80007f0:	801a      	strh	r2, [r3, #0]
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value_R);		// Write the value in TIM_PWM_Ch1
 80007f2:	4b89      	ldr	r3, [pc, #548]	; (8000a18 <main+0x4a4>)
 80007f4:	881a      	ldrh	r2, [r3, #0]
 80007f6:	4b89      	ldr	r3, [pc, #548]	; (8000a1c <main+0x4a8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, adc_value_G);		// Write the value in TIM_PWM_Ch1
 80007fc:	4b85      	ldr	r3, [pc, #532]	; (8000a14 <main+0x4a0>)
 80007fe:	881a      	ldrh	r2, [r3, #0]
 8000800:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <main+0x4a8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, adc_value_B);		// Write the value in TIM_PWM_Ch1
 8000806:	4b86      	ldr	r3, [pc, #536]	; (8000a20 <main+0x4ac>)
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b84      	ldr	r3, [pc, #528]	; (8000a1c <main+0x4a8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
	  		  HAL_Delay(100);
 8000810:	2064      	movs	r0, #100	; 0x64
 8000812:	f001 f809 	bl	8001828 <HAL_Delay>
	  		  ssd1306_Fill(Black);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fc50 	bl	80010bc <ssd1306_Fill>
	  		  oled_R = (adc_value_R*255) / 4095;								// oled_R value is in the range of 0-255
 800081c:	4b7e      	ldr	r3, [pc, #504]	; (8000a18 <main+0x4a4>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4613      	mov	r3, r2
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	4a7e      	ldr	r2, [pc, #504]	; (8000a24 <main+0x4b0>)
 800082a:	fb82 1203 	smull	r1, r2, r2, r3
 800082e:	441a      	add	r2, r3
 8000830:	12d2      	asrs	r2, r2, #11
 8000832:	17db      	asrs	r3, r3, #31
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	b29a      	uxth	r2, r3
 8000838:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <main+0x4b4>)
 800083a:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Red = %d", oled_R);								// Write in str_RGB
 800083c:	4b7a      	ldr	r3, [pc, #488]	; (8000a28 <main+0x4b4>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	497a      	ldr	r1, [pc, #488]	; (8000a2c <main+0x4b8>)
 8000844:	487a      	ldr	r0, [pc, #488]	; (8000a30 <main+0x4bc>)
 8000846:	f003 fe71 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,5);
 800084a:	2105      	movs	r1, #5
 800084c:	2005      	movs	r0, #5
 800084e:	f000 fd83 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 8000852:	4a78      	ldr	r2, [pc, #480]	; (8000a34 <main+0x4c0>)
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	4875      	ldr	r0, [pc, #468]	; (8000a30 <main+0x4bc>)
 800085a:	f000 fd57 	bl	800130c <ssd1306_WriteString>
	  		  oled_G = (adc_value_G*255) / 4095;								// oled_G value is in the range of 0-255
 800085e:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <main+0x4a0>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	4613      	mov	r3, r2
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	4a6e      	ldr	r2, [pc, #440]	; (8000a24 <main+0x4b0>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	441a      	add	r2, r3
 8000872:	12d2      	asrs	r2, r2, #11
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <main+0x4c4>)
 800087c:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Green = %d", oled_G);
 800087e:	4b6e      	ldr	r3, [pc, #440]	; (8000a38 <main+0x4c4>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	496d      	ldr	r1, [pc, #436]	; (8000a3c <main+0x4c8>)
 8000886:	486a      	ldr	r0, [pc, #424]	; (8000a30 <main+0x4bc>)
 8000888:	f003 fe50 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,25);
 800088c:	2119      	movs	r1, #25
 800088e:	2005      	movs	r0, #5
 8000890:	f000 fd62 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 8000894:	4a67      	ldr	r2, [pc, #412]	; (8000a34 <main+0x4c0>)
 8000896:	2301      	movs	r3, #1
 8000898:	ca06      	ldmia	r2, {r1, r2}
 800089a:	4865      	ldr	r0, [pc, #404]	; (8000a30 <main+0x4bc>)
 800089c:	f000 fd36 	bl	800130c <ssd1306_WriteString>
	  		  oled_B = (adc_value_B*255) / 4095;								// oled_B value is in the range of 0-255
 80008a0:	4b5f      	ldr	r3, [pc, #380]	; (8000a20 <main+0x4ac>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	4a5d      	ldr	r2, [pc, #372]	; (8000a24 <main+0x4b0>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	441a      	add	r2, r3
 80008b4:	12d2      	asrs	r2, r2, #11
 80008b6:	17db      	asrs	r3, r3, #31
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <main+0x4cc>)
 80008be:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Blue = %d", oled_B);
 80008c0:	4b5f      	ldr	r3, [pc, #380]	; (8000a40 <main+0x4cc>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	495f      	ldr	r1, [pc, #380]	; (8000a44 <main+0x4d0>)
 80008c8:	4859      	ldr	r0, [pc, #356]	; (8000a30 <main+0x4bc>)
 80008ca:	f003 fe2f 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,45);
 80008ce:	212d      	movs	r1, #45	; 0x2d
 80008d0:	2005      	movs	r0, #5
 80008d2:	f000 fd41 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 80008d6:	4a57      	ldr	r2, [pc, #348]	; (8000a34 <main+0x4c0>)
 80008d8:	2301      	movs	r3, #1
 80008da:	ca06      	ldmia	r2, {r1, r2}
 80008dc:	4854      	ldr	r0, [pc, #336]	; (8000a30 <main+0x4bc>)
 80008de:	f000 fd15 	bl	800130c <ssd1306_WriteString>
	  		  ssd1306_UpdateScreen();
 80008e2:	f000 fc0f 	bl	8001104 <ssd1306_UpdateScreen>
	  break;
 80008e6:	e12a      	b.n	8000b3e <main+0x5ca>
		  else if (count%3 == 2){												// Case 3 => Set the Blue colour.
 80008e8:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <main+0x494>)
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <main+0x498>)
 80008ee:	fb83 3201 	smull	r3, r2, r3, r1
 80008f2:	17cb      	asrs	r3, r1, #31
 80008f4:	1ad2      	subs	r2, r2, r3
 80008f6:	4613      	mov	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	4413      	add	r3, r2
 80008fc:	1aca      	subs	r2, r1, r3
 80008fe:	2a02      	cmp	r2, #2
 8000900:	f040 811d 	bne.w	8000b3e <main+0x5ca>
	  		  adc_value_B = HAL_ADC_GetValue(&hadc1);
 8000904:	4842      	ldr	r0, [pc, #264]	; (8000a10 <main+0x49c>)
 8000906:	f001 f954 	bl	8001bb2 <HAL_ADC_GetValue>
 800090a:	4603      	mov	r3, r0
 800090c:	b29a      	uxth	r2, r3
 800090e:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <main+0x4ac>)
 8000910:	801a      	strh	r2, [r3, #0]
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value_R);		// Write the value in TIM_PWM_Ch1
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <main+0x4a4>)
 8000914:	881a      	ldrh	r2, [r3, #0]
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <main+0x4a8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	635a      	str	r2, [r3, #52]	; 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, adc_value_G);		// Write the value in TIM_PWM_Ch1
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <main+0x4a0>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <main+0x4a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	639a      	str	r2, [r3, #56]	; 0x38
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, adc_value_B);		// Write the value in TIM_PWM_Ch1
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <main+0x4ac>)
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <main+0x4a8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	63da      	str	r2, [r3, #60]	; 0x3c
	  		  HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 ff79 	bl	8001828 <HAL_Delay>
	  		  ssd1306_Fill(Black);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fbc0 	bl	80010bc <ssd1306_Fill>
	  		  oled_R = (adc_value_R*255) / 4095;								// oled_R value is in the range of 0-255
 800093c:	4b36      	ldr	r3, [pc, #216]	; (8000a18 <main+0x4a4>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4613      	mov	r3, r2
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	4a36      	ldr	r2, [pc, #216]	; (8000a24 <main+0x4b0>)
 800094a:	fb82 1203 	smull	r1, r2, r2, r3
 800094e:	441a      	add	r2, r3
 8000950:	12d2      	asrs	r2, r2, #11
 8000952:	17db      	asrs	r3, r3, #31
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b29a      	uxth	r2, r3
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <main+0x4b4>)
 800095a:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Red = %d", oled_R);								// Write in str_RGB
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <main+0x4b4>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4932      	ldr	r1, [pc, #200]	; (8000a2c <main+0x4b8>)
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <main+0x4bc>)
 8000966:	f003 fde1 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,5);
 800096a:	2105      	movs	r1, #5
 800096c:	2005      	movs	r0, #5
 800096e:	f000 fcf3 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <main+0x4c0>)
 8000974:	2301      	movs	r3, #1
 8000976:	ca06      	ldmia	r2, {r1, r2}
 8000978:	482d      	ldr	r0, [pc, #180]	; (8000a30 <main+0x4bc>)
 800097a:	f000 fcc7 	bl	800130c <ssd1306_WriteString>
	  		  oled_G = (adc_value_G*255) / 4095;								// oled_G value is in the range of 0-255
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <main+0x4a0>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4613      	mov	r3, r2
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	4a26      	ldr	r2, [pc, #152]	; (8000a24 <main+0x4b0>)
 800098c:	fb82 1203 	smull	r1, r2, r2, r3
 8000990:	441a      	add	r2, r3
 8000992:	12d2      	asrs	r2, r2, #11
 8000994:	17db      	asrs	r3, r3, #31
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <main+0x4c4>)
 800099c:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Green = %d", oled_G);
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <main+0x4c4>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4925      	ldr	r1, [pc, #148]	; (8000a3c <main+0x4c8>)
 80009a6:	4822      	ldr	r0, [pc, #136]	; (8000a30 <main+0x4bc>)
 80009a8:	f003 fdc0 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,25);
 80009ac:	2119      	movs	r1, #25
 80009ae:	2005      	movs	r0, #5
 80009b0:	f000 fcd2 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 80009b4:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <main+0x4c0>)
 80009b6:	2301      	movs	r3, #1
 80009b8:	ca06      	ldmia	r2, {r1, r2}
 80009ba:	481d      	ldr	r0, [pc, #116]	; (8000a30 <main+0x4bc>)
 80009bc:	f000 fca6 	bl	800130c <ssd1306_WriteString>
	  		  oled_B = (adc_value_B*255) / 4095;								// oled_B value is in the range of 0-255
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <main+0x4ac>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4613      	mov	r3, r2
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	1a9b      	subs	r3, r3, r2
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <main+0x4b0>)
 80009ce:	fb82 1203 	smull	r1, r2, r2, r3
 80009d2:	441a      	add	r2, r3
 80009d4:	12d2      	asrs	r2, r2, #11
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <main+0x4cc>)
 80009de:	801a      	strh	r2, [r3, #0]
	  		  sprintf(str_RGB, "Blue = %d", oled_B);
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <main+0x4cc>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4917      	ldr	r1, [pc, #92]	; (8000a44 <main+0x4d0>)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <main+0x4bc>)
 80009ea:	f003 fd9f 	bl	800452c <siprintf>
	  		  ssd1306_SetCursor(5,45);
 80009ee:	212d      	movs	r1, #45	; 0x2d
 80009f0:	2005      	movs	r0, #5
 80009f2:	f000 fcb1 	bl	8001358 <ssd1306_SetCursor>
	  		  ssd1306_WriteString(str_RGB, Font_11x18, White);
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <main+0x4c0>)
 80009f8:	2301      	movs	r3, #1
 80009fa:	ca06      	ldmia	r2, {r1, r2}
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <main+0x4bc>)
 80009fe:	f000 fc85 	bl	800130c <ssd1306_WriteString>
	  		  ssd1306_UpdateScreen();
 8000a02:	f000 fb7f 	bl	8001104 <ssd1306_UpdateScreen>
	  break;
 8000a06:	e09a      	b.n	8000b3e <main+0x5ca>
 8000a08:	20000188 	.word	0x20000188
 8000a0c:	55555556 	.word	0x55555556
 8000a10:	20000094 	.word	0x20000094
 8000a14:	2000017c 	.word	0x2000017c
 8000a18:	2000017a 	.word	0x2000017a
 8000a1c:	20000130 	.word	0x20000130
 8000a20:	2000017e 	.word	0x2000017e
 8000a24:	80080081 	.word	0x80080081
 8000a28:	20000180 	.word	0x20000180
 8000a2c:	08004e04 	.word	0x08004e04
 8000a30:	20000190 	.word	0x20000190
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000182 	.word	0x20000182
 8000a3c:	08004e10 	.word	0x08004e10
 8000a40:	20000184 	.word	0x20000184
 8000a44:	08004e1c 	.word	0x08004e1c

	  case 2:
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, adc_value_R);			// Write the value in TIM_PWM_Ch1
 8000a48:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <main+0x5d0>)
 8000a4a:	881a      	ldrh	r2, [r3, #0]
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <main+0x5d4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, adc_value_G);			// Write the value in TIM_PWM_Ch1
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <main+0x5d8>)
 8000a54:	881a      	ldrh	r2, [r3, #0]
 8000a56:	4b3c      	ldr	r3, [pc, #240]	; (8000b48 <main+0x5d4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, adc_value_B);			// Write the value in TIM_PWM_Ch1
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <main+0x5dc>)
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <main+0x5d4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 8000a66:	200a      	movs	r0, #10
 8000a68:	f000 fede 	bl	8001828 <HAL_Delay>

		  ssd1306_Fill(White);
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f000 fb25 	bl	80010bc <ssd1306_Fill>
		  oled_R = (adc_value_R*255) / 4095;								// oled_R value is in the range of 0-255
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <main+0x5d0>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4613      	mov	r3, r2
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	4a35      	ldr	r2, [pc, #212]	; (8000b54 <main+0x5e0>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	441a      	add	r2, r3
 8000a86:	12d2      	asrs	r2, r2, #11
 8000a88:	17db      	asrs	r3, r3, #31
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <main+0x5e4>)
 8000a90:	801a      	strh	r2, [r3, #0]
		  sprintf(str_RGB, "Red = %d", oled_R);								// Write in str_RGB
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <main+0x5e4>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	4930      	ldr	r1, [pc, #192]	; (8000b5c <main+0x5e8>)
 8000a9a:	4831      	ldr	r0, [pc, #196]	; (8000b60 <main+0x5ec>)
 8000a9c:	f003 fd46 	bl	800452c <siprintf>
		  ssd1306_SetCursor(5,5);
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	2005      	movs	r0, #5
 8000aa4:	f000 fc58 	bl	8001358 <ssd1306_SetCursor>
		  ssd1306_WriteString(str_RGB, Font_11x18, Black);
 8000aa8:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <main+0x5f0>)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	ca06      	ldmia	r2, {r1, r2}
 8000aae:	482c      	ldr	r0, [pc, #176]	; (8000b60 <main+0x5ec>)
 8000ab0:	f000 fc2c 	bl	800130c <ssd1306_WriteString>
		  oled_G = (adc_value_G*255) / 4095;								// oled_G value is in the range of 0-255
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <main+0x5d8>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4613      	mov	r3, r2
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	1a9b      	subs	r3, r3, r2
 8000ac0:	4a24      	ldr	r2, [pc, #144]	; (8000b54 <main+0x5e0>)
 8000ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac6:	441a      	add	r2, r3
 8000ac8:	12d2      	asrs	r2, r2, #11
 8000aca:	17db      	asrs	r3, r3, #31
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <main+0x5f4>)
 8000ad2:	801a      	strh	r2, [r3, #0]
		  sprintf(str_RGB, "Green = %d", oled_G);
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <main+0x5f4>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4924      	ldr	r1, [pc, #144]	; (8000b6c <main+0x5f8>)
 8000adc:	4820      	ldr	r0, [pc, #128]	; (8000b60 <main+0x5ec>)
 8000ade:	f003 fd25 	bl	800452c <siprintf>
		  ssd1306_SetCursor(5,25);
 8000ae2:	2119      	movs	r1, #25
 8000ae4:	2005      	movs	r0, #5
 8000ae6:	f000 fc37 	bl	8001358 <ssd1306_SetCursor>
		  ssd1306_WriteString(str_RGB, Font_11x18, Black);
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <main+0x5f0>)
 8000aec:	2300      	movs	r3, #0
 8000aee:	ca06      	ldmia	r2, {r1, r2}
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <main+0x5ec>)
 8000af2:	f000 fc0b 	bl	800130c <ssd1306_WriteString>
		  oled_B = (adc_value_B*255) / 4095;								// oled_B value is in the range of 0-255
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <main+0x5dc>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4613      	mov	r3, r2
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <main+0x5e0>)
 8000b04:	fb82 1203 	smull	r1, r2, r2, r3
 8000b08:	441a      	add	r2, r3
 8000b0a:	12d2      	asrs	r2, r2, #11
 8000b0c:	17db      	asrs	r3, r3, #31
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <main+0x5fc>)
 8000b14:	801a      	strh	r2, [r3, #0]
		  sprintf(str_RGB, "Blue = %d", oled_B);
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <main+0x5fc>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4915      	ldr	r1, [pc, #84]	; (8000b74 <main+0x600>)
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <main+0x5ec>)
 8000b20:	f003 fd04 	bl	800452c <siprintf>
		  ssd1306_SetCursor(5,45);
 8000b24:	212d      	movs	r1, #45	; 0x2d
 8000b26:	2005      	movs	r0, #5
 8000b28:	f000 fc16 	bl	8001358 <ssd1306_SetCursor>
		  ssd1306_WriteString(str_RGB, Font_11x18, Black);
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <main+0x5f0>)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	ca06      	ldmia	r2, {r1, r2}
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <main+0x5ec>)
 8000b34:	f000 fbea 	bl	800130c <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 8000b38:	f000 fae4 	bl	8001104 <ssd1306_UpdateScreen>

	  break;
 8000b3c:	e000      	b.n	8000b40 <main+0x5cc>
	  break;
 8000b3e:	bf00      	nop
	  HAL_ADC_Start(&hadc1);								// Start the ADC1.
 8000b40:	e54f      	b.n	80005e2 <main+0x6e>
 8000b42:	bf00      	nop
 8000b44:	2000017a 	.word	0x2000017a
 8000b48:	20000130 	.word	0x20000130
 8000b4c:	2000017c 	.word	0x2000017c
 8000b50:	2000017e 	.word	0x2000017e
 8000b54:	80080081 	.word	0x80080081
 8000b58:	20000180 	.word	0x20000180
 8000b5c:	08004e04 	.word	0x08004e04
 8000b60:	20000190 	.word	0x20000190
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000182 	.word	0x20000182
 8000b6c:	08004e10 	.word	0x08004e10
 8000b70:	20000184 	.word	0x20000184
 8000b74:	08004e1c 	.word	0x08004e1c

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b094      	sub	sp, #80	; 0x50
 8000b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	f107 0320 	add.w	r3, r7, #32
 8000b82:	2230      	movs	r2, #48	; 0x30
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fcc8 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <SystemClock_Config+0xcc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a27      	ldr	r2, [pc, #156]	; (8000c44 <SystemClock_Config+0xcc>)
 8000ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <SystemClock_Config+0xcc>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <SystemClock_Config+0xd0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bec:	23a8      	movs	r3, #168	; 0xa8
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 f8f9 	bl	8002df4 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c08:	f000 f9b0 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c10:	2302      	movs	r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	2105      	movs	r1, #5
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fb5a 	bl	80032e4 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c36:	f000 f999 	bl	8000f6c <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3750      	adds	r7, #80	; 0x50
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40007000 	.word	0x40007000

08000c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <MX_ADC1_Init+0x9c>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c8e:	4a17      	ldr	r2, [pc, #92]	; (8000cec <MX_ADC1_Init+0xa0>)
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000cae:	f000 fddf 	bl	8001870 <HAL_ADC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 f958 	bl	8000f6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_ADC1_Init+0x98>)
 8000cce:	f000 ff7d 	bl	8001bcc <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 f948 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000094 	.word	0x20000094
 8000ce8:	40012000 	.word	0x40012000
 8000cec:	0f000001 	.word	0x0f000001

08000cf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <MX_I2C1_Init+0x54>)
 8000cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000cfc:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x58>)
 8000cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_I2C1_Init+0x50>)
 8000d2e:	f001 fc05 	bl	800253c <HAL_I2C_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f000 f918 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000dc 	.word	0x200000dc
 8000d44:	40005400 	.word	0x40005400
 8000d48:	00061a80 	.word	0x00061a80

08000d4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b096      	sub	sp, #88	; 0x58
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2220      	movs	r2, #32
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fbc9 	bl	800451c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d8a:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <MX_TIM1_Init+0x16c>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000d9c:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000d9e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db6:	483f      	ldr	r0, [pc, #252]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000db8:	f002 fca0 	bl	80036fc <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dc2:	f000 f8d3 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000dd4:	f002 fec4 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dde:	f000 f8c5 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de2:	4834      	ldr	r0, [pc, #208]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000de4:	f002 fcd9 	bl	800379a <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dee:	f000 f8bd 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000e02:	f003 fa85 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e0c:	f000 f8ae 	bl	8000f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	2200      	movs	r2, #0
 8000e32:	4619      	mov	r1, r3
 8000e34:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000e36:	f002 fdd1 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e40:	f000 f894 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e48:	2204      	movs	r2, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000e4e:	f002 fdc5 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e58:	f000 f888 	bl	8000f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	2208      	movs	r2, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000e66:	f002 fdb9 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e70:	f000 f87c 	bl	8000f6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000e98:	f003 fab6 	bl	8004408 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ea2:	f000 f863 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM1_Init+0x168>)
 8000ea8:	f000 fb76 	bl	8001598 <HAL_TIM_MspPostInit>

}
 8000eac:	bf00      	nop
 8000eae:	3758      	adds	r7, #88	; 0x58
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000130 	.word	0x20000130
 8000eb8:	40010000 	.word	0x40010000

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a22      	ldr	r2, [pc, #136]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_GPIO_Init+0xa8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000f42:	2328      	movs	r3, #40	; 0x28
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_GPIO_Init+0xac>)
 8000f56:	f001 f93d 	bl	80021d4 <HAL_GPIO_Init>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>

08000f76 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2178      	movs	r1, #120	; 0x78
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <ssd1306_WriteCommand+0x2c>)
 8000fa4:	f001 fc0e 	bl	80027c4 <HAL_I2C_Mem_Write>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000dc 	.word	0x200000dc

08000fb4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc6:	9202      	str	r2, [sp, #8]
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	2178      	movs	r1, #120	; 0x78
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <ssd1306_WriteData+0x30>)
 8000fd6:	f001 fbf5 	bl	80027c4 <HAL_I2C_Mem_Write>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000dc 	.word	0x200000dc

08000fe8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000fec:	f7ff ffc3 	bl	8000f76 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f000 fc19 	bl	8001828 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f9da 	bl	80013b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f7ff ffc1 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff ffbe 	bl	8000f84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001008:	20b0      	movs	r0, #176	; 0xb0
 800100a:	f7ff ffbb 	bl	8000f84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800100e:	20c8      	movs	r0, #200	; 0xc8
 8001010:	f7ff ffb8 	bl	8000f84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff ffb5 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800101a:	2010      	movs	r0, #16
 800101c:	f7ff ffb2 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001020:	2040      	movs	r0, #64	; 0x40
 8001022:	f7ff ffaf 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f000 f9ae 	bl	8001388 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800102c:	20a1      	movs	r0, #161	; 0xa1
 800102e:	f7ff ffa9 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001032:	20a6      	movs	r0, #166	; 0xa6
 8001034:	f7ff ffa6 	bl	8000f84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001038:	20a8      	movs	r0, #168	; 0xa8
 800103a:	f7ff ffa3 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800103e:	203f      	movs	r0, #63	; 0x3f
 8001040:	f7ff ffa0 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001044:	20a4      	movs	r0, #164	; 0xa4
 8001046:	f7ff ff9d 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800104a:	20d3      	movs	r0, #211	; 0xd3
 800104c:	f7ff ff9a 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff ff97 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001056:	20d5      	movs	r0, #213	; 0xd5
 8001058:	f7ff ff94 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800105c:	20f0      	movs	r0, #240	; 0xf0
 800105e:	f7ff ff91 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001062:	20d9      	movs	r0, #217	; 0xd9
 8001064:	f7ff ff8e 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001068:	2022      	movs	r0, #34	; 0x22
 800106a:	f7ff ff8b 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800106e:	20da      	movs	r0, #218	; 0xda
 8001070:	f7ff ff88 	bl	8000f84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001074:	2012      	movs	r0, #18
 8001076:	f7ff ff85 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800107a:	20db      	movs	r0, #219	; 0xdb
 800107c:	f7ff ff82 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001080:	2020      	movs	r0, #32
 8001082:	f7ff ff7f 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001086:	208d      	movs	r0, #141	; 0x8d
 8001088:	f7ff ff7c 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800108c:	2014      	movs	r0, #20
 800108e:	f7ff ff79 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f98c 	bl	80013b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f80f 	bl	80010bc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800109e:	f000 f831 	bl	8001104 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <ssd1306_Init+0xd0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <ssd1306_Init+0xd0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80010ae:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <ssd1306_Init+0xd0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	711a      	strb	r2, [r3, #4]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200005a0 	.word	0x200005a0

080010bc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00d      	b.n	80010e8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <ssd1306_Fill+0x1a>
 80010d2:	2100      	movs	r1, #0
 80010d4:	e000      	b.n	80010d8 <ssd1306_Fill+0x1c>
 80010d6:	21ff      	movs	r1, #255	; 0xff
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <ssd1306_Fill+0x44>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d3ed      	bcc.n	80010cc <ssd1306_Fill+0x10>
    }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200001a0 	.word	0x200001a0

08001104 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e016      	b.n	800113e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	3b50      	subs	r3, #80	; 0x50
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff34 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff31 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001122:	2010      	movs	r0, #16
 8001124:	f7ff ff2e 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	01db      	lsls	r3, r3, #7
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <ssd1306_UpdateScreen+0x4c>)
 800112e:	4413      	add	r3, r2
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff3e 	bl	8000fb4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b07      	cmp	r3, #7
 8001142:	d9e5      	bls.n	8001110 <ssd1306_UpdateScreen+0xc>
    }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200001a0 	.word	0x200001a0

08001154 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	460b      	mov	r3, r1
 8001160:	71bb      	strb	r3, [r7, #6]
 8001162:	4613      	mov	r3, r2
 8001164:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db3d      	blt.n	80011ea <ssd1306_DrawPixel+0x96>
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	2b3f      	cmp	r3, #63	; 0x3f
 8001172:	d83a      	bhi.n	80011ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d11a      	bne.n	80011b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800117a:	79fa      	ldrb	r2, [r7, #7]
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	08db      	lsrs	r3, r3, #3
 8001180:	b2d8      	uxtb	r0, r3
 8001182:	4603      	mov	r3, r0
 8001184:	01db      	lsls	r3, r3, #7
 8001186:	4413      	add	r3, r2
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <ssd1306_DrawPixel+0xa4>)
 800118a:	5cd3      	ldrb	r3, [r2, r3]
 800118c:	b25a      	sxtb	r2, r3
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	b25b      	sxtb	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b259      	sxtb	r1, r3
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4603      	mov	r3, r0
 80011a4:	01db      	lsls	r3, r3, #7
 80011a6:	4413      	add	r3, r2
 80011a8:	b2c9      	uxtb	r1, r1
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <ssd1306_DrawPixel+0xa4>)
 80011ac:	54d1      	strb	r1, [r2, r3]
 80011ae:	e01d      	b.n	80011ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011b0:	79fa      	ldrb	r2, [r7, #7]
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	b2d8      	uxtb	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	01db      	lsls	r3, r3, #7
 80011bc:	4413      	add	r3, r2
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <ssd1306_DrawPixel+0xa4>)
 80011c0:	5cd3      	ldrb	r3, [r2, r3]
 80011c2:	b25a      	sxtb	r2, r3
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4013      	ands	r3, r2
 80011d8:	b259      	sxtb	r1, r3
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	4603      	mov	r3, r0
 80011de:	01db      	lsls	r3, r3, #7
 80011e0:	4413      	add	r3, r2
 80011e2:	b2c9      	uxtb	r1, r1
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <ssd1306_DrawPixel+0xa4>)
 80011e6:	54d1      	strb	r1, [r2, r3]
 80011e8:	e000      	b.n	80011ec <ssd1306_DrawPixel+0x98>
        return;
 80011ea:	bf00      	nop
    }
}
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200001a0 	.word	0x200001a0

080011fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	4604      	mov	r4, r0
 8001204:	1d38      	adds	r0, r7, #4
 8001206:	e880 0006 	stmia.w	r0, {r1, r2}
 800120a:	461a      	mov	r2, r3
 800120c:	4623      	mov	r3, r4
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	4613      	mov	r3, r2
 8001212:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b1f      	cmp	r3, #31
 8001218:	d902      	bls.n	8001220 <ssd1306_WriteChar+0x24>
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b7e      	cmp	r3, #126	; 0x7e
 800121e:	d901      	bls.n	8001224 <ssd1306_WriteChar+0x28>
        return 0;
 8001220:	2300      	movs	r3, #0
 8001222:	e06d      	b.n	8001300 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <ssd1306_WriteChar+0x10c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	793b      	ldrb	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	dc06      	bgt.n	8001240 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <ssd1306_WriteChar+0x10c>)
 8001234:	885b      	ldrh	r3, [r3, #2]
 8001236:	461a      	mov	r2, r3
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800123c:	2b40      	cmp	r3, #64	; 0x40
 800123e:	dd01      	ble.n	8001244 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001240:	2300      	movs	r3, #0
 8001242:	e05d      	b.n	8001300 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	e04c      	b.n	80012e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3b20      	subs	r3, #32
 8001250:	7979      	ldrb	r1, [r7, #5]
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	4619      	mov	r1, r3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	440b      	add	r3, r1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e034      	b.n	80012d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d012      	beq.n	80012a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <ssd1306_WriteChar+0x10c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	b2d8      	uxtb	r0, r3
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <ssd1306_WriteChar+0x10c>)
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4413      	add	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	7bba      	ldrb	r2, [r7, #14]
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff ff5b 	bl	8001154 <ssd1306_DrawPixel>
 800129e:	e016      	b.n	80012ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <ssd1306_WriteChar+0x10c>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2d8      	uxtb	r0, r3
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <ssd1306_WriteChar+0x10c>)
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b2d9      	uxtb	r1, r3
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf0c      	ite	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	2300      	movne	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	f7ff ff43 	bl	8001154 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	461a      	mov	r2, r3
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4293      	cmp	r3, r2
 80012dc:	d3c5      	bcc.n	800126a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d3ad      	bcc.n	800124a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <ssd1306_WriteChar+0x10c>)
 80012f0:	881a      	ldrh	r2, [r3, #0]
 80012f2:	793b      	ldrb	r3, [r7, #4]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <ssd1306_WriteChar+0x10c>)
 80012fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	200005a0 	.word	0x200005a0

0800130c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	1d38      	adds	r0, r7, #4
 8001316:	e880 0006 	stmia.w	r0, {r1, r2}
 800131a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800131c:	e012      	b.n	8001344 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	7818      	ldrb	r0, [r3, #0]
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	ca06      	ldmia	r2, {r1, r2}
 8001328:	f7ff ff68 	bl	80011fc <ssd1306_WriteChar>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d002      	beq.n	800133e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	e008      	b.n	8001350 <ssd1306_WriteString+0x44>
        }
        str++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e8      	bne.n	800131e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <ssd1306_SetCursor+0x2c>)
 800136e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <ssd1306_SetCursor+0x2c>)
 8001376:	805a      	strh	r2, [r3, #2]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	200005a0 	.word	0x200005a0

08001388 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001392:	2381      	movs	r3, #129	; 0x81
 8001394:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fdf3 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fdef 	bl	8000f84 <ssd1306_WriteCommand>
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80013c0:	23af      	movs	r3, #175	; 0xaf
 80013c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <ssd1306_SetDisplayOn+0x38>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	715a      	strb	r2, [r3, #5]
 80013ca:	e004      	b.n	80013d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80013cc:	23ae      	movs	r3, #174	; 0xae
 80013ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <ssd1306_SetDisplayOn+0x38>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fdd3 	bl	8000f84 <ssd1306_WriteCommand>
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200005a0 	.word	0x200005a0

080013ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	; (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_ADC_MspInit+0x7c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d127      	bne.n	80014ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_ADC_MspInit+0x80>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_ADC_MspInit+0x80>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001496:	2302      	movs	r3, #2
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_ADC_MspInit+0x84>)
 80014aa:	f000 fe93 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_I2C_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_I2C_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001502:	23c0      	movs	r3, #192	; 0xc0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001506:	2312      	movs	r3, #18
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001512:	2304      	movs	r3, #4
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <HAL_I2C_MspInit+0x8c>)
 800151e:	f000 fe59 	bl	80021d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_I2C_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_I2C_MspInit+0x88>)
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_I2C_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40005400 	.word	0x40005400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <HAL_TIM_Base_MspInit+0x3c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10d      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_TIM_Base_MspInit+0x40>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40010000 	.word	0x40010000
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_TIM_MspPostInit+0x68>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d11e      	bne.n	80015f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_TIM_MspPostInit+0x6c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_TIM_MspPostInit+0x6c>)
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_TIM_MspPostInit+0x6c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80015d6:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80015da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_TIM_MspPostInit+0x70>)
 80015f4:	f000 fdee 	bl	80021d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40010000 	.word	0x40010000
 8001604:	40023800 	.word	0x40023800
 8001608:	40021000 	.word	0x40021000

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <NMI_Handler+0x4>

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f8c6 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f002 ff0c 	bl	80044ac <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20020000 	.word	0x20020000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	200005a8 	.word	0x200005a8
 80016c8:	200005c0 	.word	0x200005c0

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016f6:	490e      	ldr	r1, [pc, #56]	; (8001730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800170c:	4c0b      	ldr	r4, [pc, #44]	; (800173c <LoopFillZerobss+0x26>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171a:	f7ff ffd7 	bl	80016cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171e:	f002 fecb 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7fe ff27 	bl	8000574 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001734:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 8001738:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800173c:	200005c0 	.word	0x200005c0

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 fcfd 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	200f      	movs	r0, #15
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fe38 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fd07 	bl	80021ba <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 fcdd 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000010 	.word	0x20000010
 80017e4:	2000000c 	.word	0x2000000c

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000010 	.word	0x20000010
 800180c:	200005ac 	.word	0x200005ac

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	200005ac 	.word	0x200005ac

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000010 	.word	0x20000010

08001870 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e033      	b.n	80018ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fdd4 	bl	800143c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018b6:	f023 0302 	bic.w	r3, r3, #2
 80018ba:	f043 0202 	orr.w	r2, r3, #2
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 faa4 	bl	8001e10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f023 0303 	bic.w	r3, r3, #3
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
 80018de:	e001      	b.n	80018e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Start+0x1a>
 800190e:	2302      	movs	r3, #2
 8001910:	e0b2      	b.n	8001a78 <HAL_ADC_Start+0x180>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d018      	beq.n	800195a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001938:	4b52      	ldr	r3, [pc, #328]	; (8001a84 <HAL_ADC_Start+0x18c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_ADC_Start+0x190>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9a      	lsrs	r2, r3, #18
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800194c:	e002      	b.n	8001954 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3b01      	subs	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d17a      	bne.n	8001a5e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	f023 0206 	bic.w	r2, r3, #6
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_ADC_Start+0x194>)
 80019c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d12a      	bne.n	8001a34 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <HAL_ADC_Start+0x198>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d015      	beq.n	8001a14 <HAL_ADC_Start+0x11c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a29      	ldr	r2, [pc, #164]	; (8001a94 <HAL_ADC_Start+0x19c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_Start+0x106>
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_ADC_Start+0x194>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <HAL_ADC_Start+0x1a0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d136      	bne.n	8001a76 <HAL_ADC_Start+0x17e>
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_ADC_Start+0x194>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d130      	bne.n	8001a76 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d129      	bne.n	8001a76 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	e020      	b.n	8001a76 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_Start+0x198>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d11b      	bne.n	8001a76 <HAL_ADC_Start+0x17e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d114      	bne.n	8001a76 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	e00b      	b.n	8001a76 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f043 0210 	orr.w	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	20000008 	.word	0x20000008
 8001a88:	431bde83 	.word	0x431bde83
 8001a8c:	40012300 	.word	0x40012300
 8001a90:	40012000 	.word	0x40012000
 8001a94:	40012100 	.word	0x40012100
 8001a98:	40012200 	.word	0x40012200

08001a9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab8:	d113      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e063      	b.n	8001baa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001ae2:	f7ff fe95 	bl	8001810 <HAL_GetTick>
 8001ae6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae8:	e021      	b.n	8001b2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d01d      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_ADC_PollForConversion+0x6c>
 8001af8:	f7ff fe8a 	bl	8001810 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d212      	bcs.n	8001b2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d00b      	beq.n	8001b2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f043 0204 	orr.w	r2, r3, #4
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e03d      	b.n	8001baa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d1d6      	bne.n	8001aea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0212 	mvn.w	r2, #18
 8001b44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d123      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11f      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e105      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x228>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d925      	bls.n	8001c44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68d9      	ldr	r1, [r3, #12]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1e      	subs	r3, #30
 8001c0e:	2207      	movs	r2, #7
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43da      	mvns	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68d9      	ldr	r1, [r3, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4403      	add	r3, r0
 8001c36:	3b1e      	subs	r3, #30
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e022      	b.n	8001c8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	2207      	movs	r2, #7
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	400a      	ands	r2, r1
 8001c66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6919      	ldr	r1, [r3, #16]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4403      	add	r3, r0
 8001c80:	409a      	lsls	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d824      	bhi.n	8001cdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b05      	subs	r3, #5
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b05      	subs	r3, #5
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cda:	e04c      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d824      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b23      	subs	r3, #35	; 0x23
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	400a      	ands	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b23      	subs	r3, #35	; 0x23
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2c:	e023      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b41      	subs	r3, #65	; 0x41
 8001d40:	221f      	movs	r2, #31
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b41      	subs	r3, #65	; 0x41
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_ADC_ConfigChannel+0x234>)
 8001d78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_ADC_ConfigChannel+0x238>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1cc>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_ADC_ConfigChannel+0x238>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d123      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d003      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x1e6>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d11b      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d111      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_ADC_ConfigChannel+0x23c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_ADC_ConfigChannel+0x240>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9a      	lsrs	r2, r3, #18
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	40012000 	.word	0x40012000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <ADC_Init+0x1f0>)
 8001e1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	021a      	lsls	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	4a58      	ldr	r2, [pc, #352]	; (8002004 <ADC_Init+0x1f4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e00f      	b.n	8001f0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0202 	bic.w	r2, r2, #2
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e1b      	ldrb	r3, [r3, #24]
 8001f28:	005a      	lsls	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	3b01      	subs	r3, #1
 8001f68:	035a      	lsls	r2, r3, #13
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e007      	b.n	8001f84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	051a      	lsls	r2, r3, #20
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc6:	025a      	lsls	r2, r3, #9
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	029a      	lsls	r2, r3, #10
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40012300 	.word	0x40012300
 8002004:	0f000001 	.word	0x0f000001

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff47 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff5c 	bl	8002050 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb0 	bl	8002128 <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e16b      	b.n	80024c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 815a 	bne.w	80024c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80b4 	beq.w	80024c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b60      	ldr	r3, [pc, #384]	; (80024e0 <HAL_GPIO_Init+0x30c>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <HAL_GPIO_Init+0x30c>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_GPIO_Init+0x30c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <HAL_GPIO_Init+0x310>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_GPIO_Init+0x314>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_GPIO_Init+0x318>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a50      	ldr	r2, [pc, #320]	; (80024f0 <HAL_GPIO_Init+0x31c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <HAL_GPIO_Init+0x320>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4e      	ldr	r2, [pc, #312]	; (80024f8 <HAL_GPIO_Init+0x324>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_GPIO_Init+0x328>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x32c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_GPIO_Init+0x330>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x20a>
 80023da:	2307      	movs	r3, #7
 80023dc:	e00e      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023de:	2308      	movs	r3, #8
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023fa:	2300      	movs	r3, #0
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800240c:	4935      	ldr	r1, [pc, #212]	; (80024e4 <HAL_GPIO_Init+0x310>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_GPIO_Init+0x334>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800243e:	4a32      	ldr	r2, [pc, #200]	; (8002508 <HAL_GPIO_Init+0x334>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_GPIO_Init+0x334>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_GPIO_Init+0x334>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_GPIO_Init+0x334>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_GPIO_Init+0x334>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_GPIO_Init+0x334>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <HAL_GPIO_Init+0x334>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	f67f ae90 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40013800 	.word	0x40013800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40021400 	.word	0x40021400
 8002500:	40021800 	.word	0x40021800
 8002504:	40021c00 	.word	0x40021c00
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e12b      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe ffae 	bl	80014c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800258e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800259e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a0:	f001 f898 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_I2C_Init+0x274>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d807      	bhi.n	80025c0 <HAL_I2C_Init+0x84>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4a80      	ldr	r2, [pc, #512]	; (80027b4 <HAL_I2C_Init+0x278>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	bf94      	ite	ls
 80025b8:	2301      	movls	r3, #1
 80025ba:	2300      	movhi	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e006      	b.n	80025ce <HAL_I2C_Init+0x92>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a7d      	ldr	r2, [pc, #500]	; (80027b8 <HAL_I2C_Init+0x27c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0e7      	b.n	80027a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_I2C_Init+0x280>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9b      	lsrs	r3, r3, #18
 80025e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d802      	bhi.n	8002610 <HAL_I2C_Init+0xd4>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3301      	adds	r3, #1
 800260e:	e009      	b.n	8002624 <HAL_I2C_Init+0xe8>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	4a69      	ldr	r2, [pc, #420]	; (80027c0 <HAL_I2C_Init+0x284>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	3301      	adds	r3, #1
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	495c      	ldr	r1, [pc, #368]	; (80027b0 <HAL_I2C_Init+0x274>)
 8002640:	428b      	cmp	r3, r1
 8002642:	d819      	bhi.n	8002678 <HAL_I2C_Init+0x13c>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e59      	subs	r1, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002652:	1c59      	adds	r1, r3, #1
 8002654:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002658:	400b      	ands	r3, r1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_I2C_Init+0x138>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e59      	subs	r1, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fbb1 f3f3 	udiv	r3, r1, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	e051      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002674:	2304      	movs	r3, #4
 8002676:	e04f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_I2C_Init+0x168>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	e012      	b.n	80026ca <HAL_I2C_Init+0x18e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Init+0x196>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e022      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10e      	bne.n	80026f8 <HAL_I2C_Init+0x1bc>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1e58      	subs	r0, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6859      	ldr	r1, [r3, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	440b      	add	r3, r1
 80026e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	e00f      	b.n	8002718 <HAL_I2C_Init+0x1dc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	fbb0 f3f3 	udiv	r3, r0, r3
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6911      	ldr	r1, [r2, #16]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000186a0 	.word	0x000186a0
 80027b4:	001e847f 	.word	0x001e847f
 80027b8:	003d08ff 	.word	0x003d08ff
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	10624dd3 	.word	0x10624dd3

080027c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027de:	f7ff f817 	bl	8001810 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	f040 80d9 	bne.w	80029a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	496d      	ldr	r1, [pc, #436]	; (80029b0 <HAL_I2C_Mem_Write+0x1ec>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f971 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
 800280a:	e0cc      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Write+0x56>
 8002816:	2302      	movs	r3, #2
 8002818:	e0c5      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b01      	cmp	r3, #1
 800282e:	d007      	beq.n	8002840 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a3a      	ldr	r2, [r7, #32]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_I2C_Mem_Write+0x1f0>)
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002882:	88f8      	ldrh	r0, [r7, #6]
 8002884:	893a      	ldrh	r2, [r7, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4603      	mov	r3, r0
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f890 	bl	80029b8 <I2C_RequestMemoryWrite>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d052      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e081      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f9f2 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00d      	beq.n	80028ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e06b      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b04      	cmp	r3, #4
 800290a:	d11b      	bne.n	8002944 <HAL_I2C_Mem_Write+0x180>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d017      	beq.n	8002944 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1aa      	bne.n	80028a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9de 	bl	8002d12 <I2C_WaitOnBTFFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00d      	beq.n	8002978 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e016      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	00100002 	.word	0x00100002
 80029b4:	ffff0000 	.word	0xffff0000

080029b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
 80029ca:	460b      	mov	r3, r1
 80029cc:	813b      	strh	r3, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f878 	bl	8002ae4 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a08:	d103      	bne.n	8002a12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e05f      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	6a3a      	ldr	r2, [r7, #32]
 8002a2a:	492d      	ldr	r1, [pc, #180]	; (8002ae0 <I2C_RequestMemoryWrite+0x128>)
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f8b0 	bl	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04c      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f91a 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02b      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a84:	893b      	ldrh	r3, [r7, #8]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]
 8002a8e:	e021      	b.n	8002ad4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a90:	893b      	ldrh	r3, [r7, #8]
 8002a92:	0a1b      	lsrs	r3, r3, #8
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6a39      	ldr	r1, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8f4 	bl	8002c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e005      	b.n	8002ad6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	00010002 	.word	0x00010002

08002ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	e025      	b.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d021      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fe fe87 	bl	8001810 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e023      	b.n	8002b8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	e00c      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf0c      	ite	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	2300      	movne	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d0b6      	beq.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba0:	e051      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb0:	d123      	bne.n	8002bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e046      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d021      	beq.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7fe fe05 	bl	8001810 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d302      	bcc.n	8002c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e020      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10c      	bne.n	8002c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	43da      	mvns	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	e00b      	b.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d18d      	bne.n	8002ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c9c:	e02d      	b.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f878 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e02d      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d021      	beq.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fdab 	bl	8001810 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e007      	b.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b80      	cmp	r3, #128	; 0x80
 8002d06:	d1ca      	bne.n	8002c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d1e:	e02d      	b.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f837 	bl	8002d94 <I2C_IsAcknowledgeFailed>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e02d      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d021      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d38:	f7fe fd6a 	bl	8001810 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e007      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d1ca      	bne.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002daa:	d11b      	bne.n	8002de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e267      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d075      	beq.n	8002efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d112      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b82      	ldr	r3, [pc, #520]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05b      	beq.n	8002efc <HAL_RCC_OscConfig+0x108>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d157      	bne.n	8002efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e242      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x74>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4b70      	ldr	r3, [pc, #448]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6f      	ldr	r2, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6c      	ldr	r2, [pc, #432]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e8c:	4b69      	ldr	r3, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a68      	ldr	r2, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fcb0 	bl	8001810 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fcac 	bl	8001810 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e207      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fc9c 	bl	8001810 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fc98 	bl	8001810 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1f3      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0xe8>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c7      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fc51 	bl	8001810 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fc4d 	bl	8001810 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a8      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4925      	ldr	r1, [pc, #148]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fc30 	bl	8001810 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fc2c 	bl	8001810 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e187      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fc10 	bl	8001810 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fc0c 	bl	8001810 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e167      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x200>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe fbf9 	bl	8001810 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe fbf5 	bl	8001810 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d907      	bls.n	8003040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e150      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	42470000 	.word	0x42470000
 800303c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ea      	bne.n	8003022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b81      	ldr	r3, [pc, #516]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b77      	ldr	r3, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a73      	ldr	r2, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe fbb5 	bl	8001810 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe fbb1 	bl	8001810 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e10c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x2ea>
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a63      	ldr	r2, [pc, #396]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x30c>
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b55      	ldr	r3, [pc, #340]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a54      	ldr	r2, [pc, #336]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fb76 	bl	8001810 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fb72 	bl	8001810 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0cb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCC_OscConfig+0x334>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe fb60 	bl	8001810 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fb5c 	bl	8001810 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b5      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a38      	ldr	r2, [pc, #224]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d05c      	beq.n	8003258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d141      	bne.n	800322a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fb30 	bl	8001810 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fb2c 	bl	8001810 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e087      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fb05 	bl	8001810 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fb01 	bl	8001810 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e05c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x416>
 8003228:	e054      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe faee 	bl	8001810 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe faea 	bl	8001810 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e045      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
 8003256:	e03d      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e038      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000
 800326c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d028      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d121      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d11a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d111      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0cc      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d90c      	bls.n	8003320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b65      	ldr	r3, [pc, #404]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003338:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	494d      	ldr	r1, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d044      	beq.n	8003404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e067      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4934      	ldr	r1, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fa1c 	bl	8001810 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fe fa18 	bl	8001810 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e04f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 020c 	and.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d1eb      	bne.n	80033dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d20c      	bcs.n	800342c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4916      	ldr	r1, [pc, #88]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346a:	f000 f821 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	490a      	ldr	r1, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe f97c 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023c00 	.word	0x40023c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08005b84 	.word	0x08005b84
 80034a8:	20000008 	.word	0x20000008
 80034ac:	2000000c 	.word	0x2000000c

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b4:	b094      	sub	sp, #80	; 0x50
 80034b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
 80034bc:	2300      	movs	r3, #0
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	2300      	movs	r3, #0
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c8:	4b79      	ldr	r3, [pc, #484]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d00d      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	f200 80e1 	bhi.w	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x3a>
 80034e2:	e0db      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b73      	ldr	r3, [pc, #460]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034e8:	e0db      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ea:	4b73      	ldr	r3, [pc, #460]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ee:	e0d8      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d063      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003510:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4621      	mov	r1, r4
 800353c:	1a51      	subs	r1, r2, r1
 800353e:	6139      	str	r1, [r7, #16]
 8003540:	4629      	mov	r1, r5
 8003542:	eb63 0301 	sbc.w	r3, r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355e:	4651      	mov	r1, sl
 8003560:	018a      	lsls	r2, r1, #6
 8003562:	4651      	mov	r1, sl
 8003564:	ebb2 0801 	subs.w	r8, r2, r1
 8003568:	4659      	mov	r1, fp
 800356a:	eb63 0901 	sbc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	4623      	mov	r3, r4
 8003588:	eb18 0303 	adds.w	r3, r8, r3
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	462b      	mov	r3, r5
 8003590:	eb49 0303 	adc.w	r3, r9, r3
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035a2:	4629      	mov	r1, r5
 80035a4:	024b      	lsls	r3, r1, #9
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ac:	4621      	mov	r1, r4
 80035ae:	024a      	lsls	r2, r1, #9
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c0:	f7fc fe56 	bl	8000270 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	e058      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	2200      	movs	r2, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	4611      	mov	r1, r2
 80035da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	0159      	lsls	r1, r3, #5
 80035f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fa:	0150      	lsls	r0, r2, #5
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4641      	mov	r1, r8
 8003602:	ebb2 0a01 	subs.w	sl, r2, r1
 8003606:	4649      	mov	r1, r9
 8003608:	eb63 0b01 	sbc.w	fp, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800361c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003620:	ebb2 040a 	subs.w	r4, r2, sl
 8003624:	eb63 050b 	sbc.w	r5, r3, fp
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	00eb      	lsls	r3, r5, #3
 8003632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003636:	00e2      	lsls	r2, r4, #3
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	4643      	mov	r3, r8
 800363e:	18e3      	adds	r3, r4, r3
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	464b      	mov	r3, r9
 8003644:	eb45 0303 	adc.w	r3, r5, r3
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003656:	4629      	mov	r1, r5
 8003658:	028b      	lsls	r3, r1, #10
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003660:	4621      	mov	r1, r4
 8003662:	028a      	lsls	r2, r1, #10
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	61fa      	str	r2, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	f7fc fdfc 	bl	8000270 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	3301      	adds	r3, #1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003690:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3750      	adds	r7, #80	; 0x50
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000008 	.word	0x20000008

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff0 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08005b94 	.word	0x08005b94

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd ff16 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fad8 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e041      	b.n	8003830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f839 	bl	8003838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa89 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fce0 	bl	80042c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0xcc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Start+0xd0>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_TIM_PWM_Start+0xd2>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_TIM_PWM_Start+0x174>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_TIM_PWM_Start+0x17c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_TIM_PWM_Start+0x180>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_TIM_PWM_Start+0x184>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <HAL_TIM_PWM_Start+0x178>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_TIM_PWM_Start+0x188>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <HAL_TIM_PWM_Start+0x18c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40001800 	.word	0x40001800

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ae      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f200 809f 	bhi.w	8003b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b49 	.word	0x08003b49
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003b49 	.word	0x08003b49
 8003a38:	08003b49 	.word	0x08003b49
 8003a3c:	08003b49 	.word	0x08003b49
 8003a40:	08003b07 	.word	0x08003b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f9f0 	bl	8003e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e064      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fa40 	bl	8003f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e043      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa95 	bl	8003ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e023      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fae9 	bl	80040e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0b4      	b.n	8003ce6 <HAL_TIM_ConfigClockSource+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb4:	d03e      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	f200 8087 	bhi.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_TIM_ConfigClockSource+0x172>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d87f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b70      	cmp	r3, #112	; 0x70
 8003bce:	d01a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xa6>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d87b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b60      	cmp	r3, #96	; 0x60
 8003bd6:	d050      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x11a>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d877      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b50      	cmp	r3, #80	; 0x50
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xfa>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d873      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d058      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x13a>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d86f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b30      	cmp	r3, #48	; 0x30
 8003bee:	d064      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d86b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d060      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d867      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05c      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d05a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	e062      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f000 fb35 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
      break;
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f000 fb1e 	bl	8004284 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c56:	609a      	str	r2, [r3, #8]
      break;
 8003c58:	e03c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fa92 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2150      	movs	r1, #80	; 0x50
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 faeb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003c78:	e02c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fab1 	bl	80041ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2160      	movs	r1, #96	; 0x60
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fadb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 fa72 	bl	8004190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2140      	movs	r1, #64	; 0x40
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 facb 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 fac2 	bl	800424e <TIM_ITRx_SetConfig>
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a40      	ldr	r2, [pc, #256]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d027      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	; (8003e08 <TIM_Base_SetConfig+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d023      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	; (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a25      	ldr	r2, [pc, #148]	; (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a24      	ldr	r2, [pc, #144]	; (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <TIM_Base_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0xf8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <TIM_Base_SetConfig+0x124>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40010400 	.word	0x40010400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	40001800 	.word	0x40001800
 8003e28:	40001c00 	.word	0x40001c00
 8003e2c:	40002000 	.word	0x40002000

08003e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <TIM_OC1_SetConfig+0xd8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC1_SetConfig+0x64>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <TIM_OC1_SetConfig+0xdc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10c      	bne.n	8003eae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f023 0308 	bic.w	r3, r3, #8
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <TIM_OC1_SetConfig+0xd8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC1_SetConfig+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a14      	ldr	r2, [pc, #80]	; (8003f0c <TIM_OC1_SetConfig+0xdc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d111      	bne.n	8003ee2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	621a      	str	r2, [r3, #32]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010400 	.word	0x40010400

08003f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0210 	bic.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0320 	bic.w	r3, r3, #32
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <TIM_OC2_SetConfig+0xe4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC2_SetConfig+0x68>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <TIM_OC2_SetConfig+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10d      	bne.n	8003f94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <TIM_OC2_SetConfig+0xe4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC2_SetConfig+0x94>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <TIM_OC2_SetConfig+0xe8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d113      	bne.n	8003fcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	40010400 	.word	0x40010400

08003ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_OC3_SetConfig+0xe0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC3_SetConfig+0x66>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a20      	ldr	r2, [pc, #128]	; (80040e0 <TIM_OC3_SetConfig+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10d      	bne.n	800407e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <TIM_OC3_SetConfig+0xe0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_OC3_SetConfig+0x92>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <TIM_OC3_SetConfig+0xe4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d113      	bne.n	80040b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800412e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a12      	ldr	r2, [pc, #72]	; (8004188 <TIM_OC4_SetConfig+0xa4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_OC4_SetConfig+0x68>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <TIM_OC4_SetConfig+0xa8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d109      	bne.n	8004160 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010000 	.word	0x40010000
 800418c:	40010400 	.word	0x40010400

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 030a 	bic.w	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0210 	bic.w	r2, r3, #16
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	f043 0307 	orr.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800429e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	021a      	lsls	r2, r3, #8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e05a      	b.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a21      	ldr	r2, [pc, #132]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d01d      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10c      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800

08004408 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e03d      	b.n	80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	; (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000014 	.word	0x20000014

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4d0d      	ldr	r5, [pc, #52]	; (80044f0 <__libc_init_array+0x38>)
 80044bc:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <__libc_init_array+0x3c>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	2600      	movs	r6, #0
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	4d0b      	ldr	r5, [pc, #44]	; (80044f8 <__libc_init_array+0x40>)
 80044ca:	4c0c      	ldr	r4, [pc, #48]	; (80044fc <__libc_init_array+0x44>)
 80044cc:	f000 fc8e 	bl	8004dec <_init>
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	10a4      	asrs	r4, r4, #2
 80044d4:	2600      	movs	r6, #0
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	08005bd8 	.word	0x08005bd8
 80044f4:	08005bd8 	.word	0x08005bd8
 80044f8:	08005bd8 	.word	0x08005bd8
 80044fc:	08005bdc 	.word	0x08005bdc

08004500 <memcpy>:
 8004500:	440a      	add	r2, r1
 8004502:	4291      	cmp	r1, r2
 8004504:	f100 33ff 	add.w	r3, r0, #4294967295
 8004508:	d100      	bne.n	800450c <memcpy+0xc>
 800450a:	4770      	bx	lr
 800450c:	b510      	push	{r4, lr}
 800450e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004512:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004516:	4291      	cmp	r1, r2
 8004518:	d1f9      	bne.n	800450e <memcpy+0xe>
 800451a:	bd10      	pop	{r4, pc}

0800451c <memset>:
 800451c:	4402      	add	r2, r0
 800451e:	4603      	mov	r3, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <siprintf>:
 800452c:	b40e      	push	{r1, r2, r3}
 800452e:	b500      	push	{lr}
 8004530:	b09c      	sub	sp, #112	; 0x70
 8004532:	ab1d      	add	r3, sp, #116	; 0x74
 8004534:	9002      	str	r0, [sp, #8]
 8004536:	9006      	str	r0, [sp, #24]
 8004538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800453c:	4809      	ldr	r0, [pc, #36]	; (8004564 <siprintf+0x38>)
 800453e:	9107      	str	r1, [sp, #28]
 8004540:	9104      	str	r1, [sp, #16]
 8004542:	4909      	ldr	r1, [pc, #36]	; (8004568 <siprintf+0x3c>)
 8004544:	f853 2b04 	ldr.w	r2, [r3], #4
 8004548:	9105      	str	r1, [sp, #20]
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	a902      	add	r1, sp, #8
 8004550:	f000 f868 	bl	8004624 <_svfiprintf_r>
 8004554:	9b02      	ldr	r3, [sp, #8]
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	b01c      	add	sp, #112	; 0x70
 800455c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004560:	b003      	add	sp, #12
 8004562:	4770      	bx	lr
 8004564:	20000014 	.word	0x20000014
 8004568:	ffff0208 	.word	0xffff0208

0800456c <__ssputs_r>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	688e      	ldr	r6, [r1, #8]
 8004572:	429e      	cmp	r6, r3
 8004574:	4682      	mov	sl, r0
 8004576:	460c      	mov	r4, r1
 8004578:	4690      	mov	r8, r2
 800457a:	461f      	mov	r7, r3
 800457c:	d838      	bhi.n	80045f0 <__ssputs_r+0x84>
 800457e:	898a      	ldrh	r2, [r1, #12]
 8004580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004584:	d032      	beq.n	80045ec <__ssputs_r+0x80>
 8004586:	6825      	ldr	r5, [r4, #0]
 8004588:	6909      	ldr	r1, [r1, #16]
 800458a:	eba5 0901 	sub.w	r9, r5, r1
 800458e:	6965      	ldr	r5, [r4, #20]
 8004590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004598:	3301      	adds	r3, #1
 800459a:	444b      	add	r3, r9
 800459c:	106d      	asrs	r5, r5, #1
 800459e:	429d      	cmp	r5, r3
 80045a0:	bf38      	it	cc
 80045a2:	461d      	movcc	r5, r3
 80045a4:	0553      	lsls	r3, r2, #21
 80045a6:	d531      	bpl.n	800460c <__ssputs_r+0xa0>
 80045a8:	4629      	mov	r1, r5
 80045aa:	f000 fb55 	bl	8004c58 <_malloc_r>
 80045ae:	4606      	mov	r6, r0
 80045b0:	b950      	cbnz	r0, 80045c8 <__ssputs_r+0x5c>
 80045b2:	230c      	movs	r3, #12
 80045b4:	f8ca 3000 	str.w	r3, [sl]
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c8:	6921      	ldr	r1, [r4, #16]
 80045ca:	464a      	mov	r2, r9
 80045cc:	f7ff ff98 	bl	8004500 <memcpy>
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	6126      	str	r6, [r4, #16]
 80045de:	6165      	str	r5, [r4, #20]
 80045e0:	444e      	add	r6, r9
 80045e2:	eba5 0509 	sub.w	r5, r5, r9
 80045e6:	6026      	str	r6, [r4, #0]
 80045e8:	60a5      	str	r5, [r4, #8]
 80045ea:	463e      	mov	r6, r7
 80045ec:	42be      	cmp	r6, r7
 80045ee:	d900      	bls.n	80045f2 <__ssputs_r+0x86>
 80045f0:	463e      	mov	r6, r7
 80045f2:	6820      	ldr	r0, [r4, #0]
 80045f4:	4632      	mov	r2, r6
 80045f6:	4641      	mov	r1, r8
 80045f8:	f000 faa8 	bl	8004b4c <memmove>
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	1b9b      	subs	r3, r3, r6
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	4433      	add	r3, r6
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	2000      	movs	r0, #0
 800460a:	e7db      	b.n	80045c4 <__ssputs_r+0x58>
 800460c:	462a      	mov	r2, r5
 800460e:	f000 fb97 	bl	8004d40 <_realloc_r>
 8004612:	4606      	mov	r6, r0
 8004614:	2800      	cmp	r0, #0
 8004616:	d1e1      	bne.n	80045dc <__ssputs_r+0x70>
 8004618:	6921      	ldr	r1, [r4, #16]
 800461a:	4650      	mov	r0, sl
 800461c:	f000 fab0 	bl	8004b80 <_free_r>
 8004620:	e7c7      	b.n	80045b2 <__ssputs_r+0x46>
	...

08004624 <_svfiprintf_r>:
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	4698      	mov	r8, r3
 800462a:	898b      	ldrh	r3, [r1, #12]
 800462c:	061b      	lsls	r3, r3, #24
 800462e:	b09d      	sub	sp, #116	; 0x74
 8004630:	4607      	mov	r7, r0
 8004632:	460d      	mov	r5, r1
 8004634:	4614      	mov	r4, r2
 8004636:	d50e      	bpl.n	8004656 <_svfiprintf_r+0x32>
 8004638:	690b      	ldr	r3, [r1, #16]
 800463a:	b963      	cbnz	r3, 8004656 <_svfiprintf_r+0x32>
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	f000 fb0b 	bl	8004c58 <_malloc_r>
 8004642:	6028      	str	r0, [r5, #0]
 8004644:	6128      	str	r0, [r5, #16]
 8004646:	b920      	cbnz	r0, 8004652 <_svfiprintf_r+0x2e>
 8004648:	230c      	movs	r3, #12
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	e0d1      	b.n	80047f6 <_svfiprintf_r+0x1d2>
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	616b      	str	r3, [r5, #20]
 8004656:	2300      	movs	r3, #0
 8004658:	9309      	str	r3, [sp, #36]	; 0x24
 800465a:	2320      	movs	r3, #32
 800465c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004660:	f8cd 800c 	str.w	r8, [sp, #12]
 8004664:	2330      	movs	r3, #48	; 0x30
 8004666:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004810 <_svfiprintf_r+0x1ec>
 800466a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800466e:	f04f 0901 	mov.w	r9, #1
 8004672:	4623      	mov	r3, r4
 8004674:	469a      	mov	sl, r3
 8004676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800467a:	b10a      	cbz	r2, 8004680 <_svfiprintf_r+0x5c>
 800467c:	2a25      	cmp	r2, #37	; 0x25
 800467e:	d1f9      	bne.n	8004674 <_svfiprintf_r+0x50>
 8004680:	ebba 0b04 	subs.w	fp, sl, r4
 8004684:	d00b      	beq.n	800469e <_svfiprintf_r+0x7a>
 8004686:	465b      	mov	r3, fp
 8004688:	4622      	mov	r2, r4
 800468a:	4629      	mov	r1, r5
 800468c:	4638      	mov	r0, r7
 800468e:	f7ff ff6d 	bl	800456c <__ssputs_r>
 8004692:	3001      	adds	r0, #1
 8004694:	f000 80aa 	beq.w	80047ec <_svfiprintf_r+0x1c8>
 8004698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800469a:	445a      	add	r2, fp
 800469c:	9209      	str	r2, [sp, #36]	; 0x24
 800469e:	f89a 3000 	ldrb.w	r3, [sl]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a2 	beq.w	80047ec <_svfiprintf_r+0x1c8>
 80046a8:	2300      	movs	r3, #0
 80046aa:	f04f 32ff 	mov.w	r2, #4294967295
 80046ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046b2:	f10a 0a01 	add.w	sl, sl, #1
 80046b6:	9304      	str	r3, [sp, #16]
 80046b8:	9307      	str	r3, [sp, #28]
 80046ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046be:	931a      	str	r3, [sp, #104]	; 0x68
 80046c0:	4654      	mov	r4, sl
 80046c2:	2205      	movs	r2, #5
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	4851      	ldr	r0, [pc, #324]	; (8004810 <_svfiprintf_r+0x1ec>)
 80046ca:	f7fb fd81 	bl	80001d0 <memchr>
 80046ce:	9a04      	ldr	r2, [sp, #16]
 80046d0:	b9d8      	cbnz	r0, 800470a <_svfiprintf_r+0xe6>
 80046d2:	06d0      	lsls	r0, r2, #27
 80046d4:	bf44      	itt	mi
 80046d6:	2320      	movmi	r3, #32
 80046d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046dc:	0711      	lsls	r1, r2, #28
 80046de:	bf44      	itt	mi
 80046e0:	232b      	movmi	r3, #43	; 0x2b
 80046e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ea:	2b2a      	cmp	r3, #42	; 0x2a
 80046ec:	d015      	beq.n	800471a <_svfiprintf_r+0xf6>
 80046ee:	9a07      	ldr	r2, [sp, #28]
 80046f0:	4654      	mov	r4, sl
 80046f2:	2000      	movs	r0, #0
 80046f4:	f04f 0c0a 	mov.w	ip, #10
 80046f8:	4621      	mov	r1, r4
 80046fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046fe:	3b30      	subs	r3, #48	; 0x30
 8004700:	2b09      	cmp	r3, #9
 8004702:	d94e      	bls.n	80047a2 <_svfiprintf_r+0x17e>
 8004704:	b1b0      	cbz	r0, 8004734 <_svfiprintf_r+0x110>
 8004706:	9207      	str	r2, [sp, #28]
 8004708:	e014      	b.n	8004734 <_svfiprintf_r+0x110>
 800470a:	eba0 0308 	sub.w	r3, r0, r8
 800470e:	fa09 f303 	lsl.w	r3, r9, r3
 8004712:	4313      	orrs	r3, r2
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	46a2      	mov	sl, r4
 8004718:	e7d2      	b.n	80046c0 <_svfiprintf_r+0x9c>
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	9103      	str	r1, [sp, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	bfbb      	ittet	lt
 8004726:	425b      	neglt	r3, r3
 8004728:	f042 0202 	orrlt.w	r2, r2, #2
 800472c:	9307      	strge	r3, [sp, #28]
 800472e:	9307      	strlt	r3, [sp, #28]
 8004730:	bfb8      	it	lt
 8004732:	9204      	strlt	r2, [sp, #16]
 8004734:	7823      	ldrb	r3, [r4, #0]
 8004736:	2b2e      	cmp	r3, #46	; 0x2e
 8004738:	d10c      	bne.n	8004754 <_svfiprintf_r+0x130>
 800473a:	7863      	ldrb	r3, [r4, #1]
 800473c:	2b2a      	cmp	r3, #42	; 0x2a
 800473e:	d135      	bne.n	80047ac <_svfiprintf_r+0x188>
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	1d1a      	adds	r2, r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	9203      	str	r2, [sp, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	bfb8      	it	lt
 800474c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004750:	3402      	adds	r4, #2
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004820 <_svfiprintf_r+0x1fc>
 8004758:	7821      	ldrb	r1, [r4, #0]
 800475a:	2203      	movs	r2, #3
 800475c:	4650      	mov	r0, sl
 800475e:	f7fb fd37 	bl	80001d0 <memchr>
 8004762:	b140      	cbz	r0, 8004776 <_svfiprintf_r+0x152>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	eba0 000a 	sub.w	r0, r0, sl
 800476a:	fa03 f000 	lsl.w	r0, r3, r0
 800476e:	9b04      	ldr	r3, [sp, #16]
 8004770:	4303      	orrs	r3, r0
 8004772:	3401      	adds	r4, #1
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800477a:	4826      	ldr	r0, [pc, #152]	; (8004814 <_svfiprintf_r+0x1f0>)
 800477c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004780:	2206      	movs	r2, #6
 8004782:	f7fb fd25 	bl	80001d0 <memchr>
 8004786:	2800      	cmp	r0, #0
 8004788:	d038      	beq.n	80047fc <_svfiprintf_r+0x1d8>
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <_svfiprintf_r+0x1f4>)
 800478c:	bb1b      	cbnz	r3, 80047d6 <_svfiprintf_r+0x1b2>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	3307      	adds	r3, #7
 8004792:	f023 0307 	bic.w	r3, r3, #7
 8004796:	3308      	adds	r3, #8
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800479c:	4433      	add	r3, r6
 800479e:	9309      	str	r3, [sp, #36]	; 0x24
 80047a0:	e767      	b.n	8004672 <_svfiprintf_r+0x4e>
 80047a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80047a6:	460c      	mov	r4, r1
 80047a8:	2001      	movs	r0, #1
 80047aa:	e7a5      	b.n	80046f8 <_svfiprintf_r+0xd4>
 80047ac:	2300      	movs	r3, #0
 80047ae:	3401      	adds	r4, #1
 80047b0:	9305      	str	r3, [sp, #20]
 80047b2:	4619      	mov	r1, r3
 80047b4:	f04f 0c0a 	mov.w	ip, #10
 80047b8:	4620      	mov	r0, r4
 80047ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047be:	3a30      	subs	r2, #48	; 0x30
 80047c0:	2a09      	cmp	r2, #9
 80047c2:	d903      	bls.n	80047cc <_svfiprintf_r+0x1a8>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0c5      	beq.n	8004754 <_svfiprintf_r+0x130>
 80047c8:	9105      	str	r1, [sp, #20]
 80047ca:	e7c3      	b.n	8004754 <_svfiprintf_r+0x130>
 80047cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80047d0:	4604      	mov	r4, r0
 80047d2:	2301      	movs	r3, #1
 80047d4:	e7f0      	b.n	80047b8 <_svfiprintf_r+0x194>
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	462a      	mov	r2, r5
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <_svfiprintf_r+0x1f8>)
 80047de:	a904      	add	r1, sp, #16
 80047e0:	4638      	mov	r0, r7
 80047e2:	f3af 8000 	nop.w
 80047e6:	1c42      	adds	r2, r0, #1
 80047e8:	4606      	mov	r6, r0
 80047ea:	d1d6      	bne.n	800479a <_svfiprintf_r+0x176>
 80047ec:	89ab      	ldrh	r3, [r5, #12]
 80047ee:	065b      	lsls	r3, r3, #25
 80047f0:	f53f af2c 	bmi.w	800464c <_svfiprintf_r+0x28>
 80047f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047f6:	b01d      	add	sp, #116	; 0x74
 80047f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <_svfiprintf_r+0x1f8>)
 8004804:	a904      	add	r1, sp, #16
 8004806:	4638      	mov	r0, r7
 8004808:	f000 f87a 	bl	8004900 <_printf_i>
 800480c:	e7eb      	b.n	80047e6 <_svfiprintf_r+0x1c2>
 800480e:	bf00      	nop
 8004810:	08005b9c 	.word	0x08005b9c
 8004814:	08005ba6 	.word	0x08005ba6
 8004818:	00000000 	.word	0x00000000
 800481c:	0800456d 	.word	0x0800456d
 8004820:	08005ba2 	.word	0x08005ba2

08004824 <_printf_common>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	4616      	mov	r6, r2
 800482a:	4699      	mov	r9, r3
 800482c:	688a      	ldr	r2, [r1, #8]
 800482e:	690b      	ldr	r3, [r1, #16]
 8004830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004834:	4293      	cmp	r3, r2
 8004836:	bfb8      	it	lt
 8004838:	4613      	movlt	r3, r2
 800483a:	6033      	str	r3, [r6, #0]
 800483c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004840:	4607      	mov	r7, r0
 8004842:	460c      	mov	r4, r1
 8004844:	b10a      	cbz	r2, 800484a <_printf_common+0x26>
 8004846:	3301      	adds	r3, #1
 8004848:	6033      	str	r3, [r6, #0]
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	0699      	lsls	r1, r3, #26
 800484e:	bf42      	ittt	mi
 8004850:	6833      	ldrmi	r3, [r6, #0]
 8004852:	3302      	addmi	r3, #2
 8004854:	6033      	strmi	r3, [r6, #0]
 8004856:	6825      	ldr	r5, [r4, #0]
 8004858:	f015 0506 	ands.w	r5, r5, #6
 800485c:	d106      	bne.n	800486c <_printf_common+0x48>
 800485e:	f104 0a19 	add.w	sl, r4, #25
 8004862:	68e3      	ldr	r3, [r4, #12]
 8004864:	6832      	ldr	r2, [r6, #0]
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	42ab      	cmp	r3, r5
 800486a:	dc26      	bgt.n	80048ba <_printf_common+0x96>
 800486c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004870:	1e13      	subs	r3, r2, #0
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	bf18      	it	ne
 8004876:	2301      	movne	r3, #1
 8004878:	0692      	lsls	r2, r2, #26
 800487a:	d42b      	bmi.n	80048d4 <_printf_common+0xb0>
 800487c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004880:	4649      	mov	r1, r9
 8004882:	4638      	mov	r0, r7
 8004884:	47c0      	blx	r8
 8004886:	3001      	adds	r0, #1
 8004888:	d01e      	beq.n	80048c8 <_printf_common+0xa4>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	68e5      	ldr	r5, [r4, #12]
 800488e:	6832      	ldr	r2, [r6, #0]
 8004890:	f003 0306 	and.w	r3, r3, #6
 8004894:	2b04      	cmp	r3, #4
 8004896:	bf08      	it	eq
 8004898:	1aad      	subeq	r5, r5, r2
 800489a:	68a3      	ldr	r3, [r4, #8]
 800489c:	6922      	ldr	r2, [r4, #16]
 800489e:	bf0c      	ite	eq
 80048a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048a4:	2500      	movne	r5, #0
 80048a6:	4293      	cmp	r3, r2
 80048a8:	bfc4      	itt	gt
 80048aa:	1a9b      	subgt	r3, r3, r2
 80048ac:	18ed      	addgt	r5, r5, r3
 80048ae:	2600      	movs	r6, #0
 80048b0:	341a      	adds	r4, #26
 80048b2:	42b5      	cmp	r5, r6
 80048b4:	d11a      	bne.n	80048ec <_printf_common+0xc8>
 80048b6:	2000      	movs	r0, #0
 80048b8:	e008      	b.n	80048cc <_printf_common+0xa8>
 80048ba:	2301      	movs	r3, #1
 80048bc:	4652      	mov	r2, sl
 80048be:	4649      	mov	r1, r9
 80048c0:	4638      	mov	r0, r7
 80048c2:	47c0      	blx	r8
 80048c4:	3001      	adds	r0, #1
 80048c6:	d103      	bne.n	80048d0 <_printf_common+0xac>
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d0:	3501      	adds	r5, #1
 80048d2:	e7c6      	b.n	8004862 <_printf_common+0x3e>
 80048d4:	18e1      	adds	r1, r4, r3
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	2030      	movs	r0, #48	; 0x30
 80048da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048de:	4422      	add	r2, r4
 80048e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048e8:	3302      	adds	r3, #2
 80048ea:	e7c7      	b.n	800487c <_printf_common+0x58>
 80048ec:	2301      	movs	r3, #1
 80048ee:	4622      	mov	r2, r4
 80048f0:	4649      	mov	r1, r9
 80048f2:	4638      	mov	r0, r7
 80048f4:	47c0      	blx	r8
 80048f6:	3001      	adds	r0, #1
 80048f8:	d0e6      	beq.n	80048c8 <_printf_common+0xa4>
 80048fa:	3601      	adds	r6, #1
 80048fc:	e7d9      	b.n	80048b2 <_printf_common+0x8e>
	...

08004900 <_printf_i>:
 8004900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	7e0f      	ldrb	r7, [r1, #24]
 8004906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004908:	2f78      	cmp	r7, #120	; 0x78
 800490a:	4691      	mov	r9, r2
 800490c:	4680      	mov	r8, r0
 800490e:	460c      	mov	r4, r1
 8004910:	469a      	mov	sl, r3
 8004912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004916:	d807      	bhi.n	8004928 <_printf_i+0x28>
 8004918:	2f62      	cmp	r7, #98	; 0x62
 800491a:	d80a      	bhi.n	8004932 <_printf_i+0x32>
 800491c:	2f00      	cmp	r7, #0
 800491e:	f000 80d8 	beq.w	8004ad2 <_printf_i+0x1d2>
 8004922:	2f58      	cmp	r7, #88	; 0x58
 8004924:	f000 80a3 	beq.w	8004a6e <_printf_i+0x16e>
 8004928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800492c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004930:	e03a      	b.n	80049a8 <_printf_i+0xa8>
 8004932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004936:	2b15      	cmp	r3, #21
 8004938:	d8f6      	bhi.n	8004928 <_printf_i+0x28>
 800493a:	a101      	add	r1, pc, #4	; (adr r1, 8004940 <_printf_i+0x40>)
 800493c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004940:	08004999 	.word	0x08004999
 8004944:	080049ad 	.word	0x080049ad
 8004948:	08004929 	.word	0x08004929
 800494c:	08004929 	.word	0x08004929
 8004950:	08004929 	.word	0x08004929
 8004954:	08004929 	.word	0x08004929
 8004958:	080049ad 	.word	0x080049ad
 800495c:	08004929 	.word	0x08004929
 8004960:	08004929 	.word	0x08004929
 8004964:	08004929 	.word	0x08004929
 8004968:	08004929 	.word	0x08004929
 800496c:	08004ab9 	.word	0x08004ab9
 8004970:	080049dd 	.word	0x080049dd
 8004974:	08004a9b 	.word	0x08004a9b
 8004978:	08004929 	.word	0x08004929
 800497c:	08004929 	.word	0x08004929
 8004980:	08004adb 	.word	0x08004adb
 8004984:	08004929 	.word	0x08004929
 8004988:	080049dd 	.word	0x080049dd
 800498c:	08004929 	.word	0x08004929
 8004990:	08004929 	.word	0x08004929
 8004994:	08004aa3 	.word	0x08004aa3
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	1d1a      	adds	r2, r3, #4
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	602a      	str	r2, [r5, #0]
 80049a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0a3      	b.n	8004af4 <_printf_i+0x1f4>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	6829      	ldr	r1, [r5, #0]
 80049b0:	0606      	lsls	r6, r0, #24
 80049b2:	f101 0304 	add.w	r3, r1, #4
 80049b6:	d50a      	bpl.n	80049ce <_printf_i+0xce>
 80049b8:	680e      	ldr	r6, [r1, #0]
 80049ba:	602b      	str	r3, [r5, #0]
 80049bc:	2e00      	cmp	r6, #0
 80049be:	da03      	bge.n	80049c8 <_printf_i+0xc8>
 80049c0:	232d      	movs	r3, #45	; 0x2d
 80049c2:	4276      	negs	r6, r6
 80049c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049c8:	485e      	ldr	r0, [pc, #376]	; (8004b44 <_printf_i+0x244>)
 80049ca:	230a      	movs	r3, #10
 80049cc:	e019      	b.n	8004a02 <_printf_i+0x102>
 80049ce:	680e      	ldr	r6, [r1, #0]
 80049d0:	602b      	str	r3, [r5, #0]
 80049d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049d6:	bf18      	it	ne
 80049d8:	b236      	sxthne	r6, r6
 80049da:	e7ef      	b.n	80049bc <_printf_i+0xbc>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	1d19      	adds	r1, r3, #4
 80049e2:	6029      	str	r1, [r5, #0]
 80049e4:	0601      	lsls	r1, r0, #24
 80049e6:	d501      	bpl.n	80049ec <_printf_i+0xec>
 80049e8:	681e      	ldr	r6, [r3, #0]
 80049ea:	e002      	b.n	80049f2 <_printf_i+0xf2>
 80049ec:	0646      	lsls	r6, r0, #25
 80049ee:	d5fb      	bpl.n	80049e8 <_printf_i+0xe8>
 80049f0:	881e      	ldrh	r6, [r3, #0]
 80049f2:	4854      	ldr	r0, [pc, #336]	; (8004b44 <_printf_i+0x244>)
 80049f4:	2f6f      	cmp	r7, #111	; 0x6f
 80049f6:	bf0c      	ite	eq
 80049f8:	2308      	moveq	r3, #8
 80049fa:	230a      	movne	r3, #10
 80049fc:	2100      	movs	r1, #0
 80049fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a02:	6865      	ldr	r5, [r4, #4]
 8004a04:	60a5      	str	r5, [r4, #8]
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	bfa2      	ittt	ge
 8004a0a:	6821      	ldrge	r1, [r4, #0]
 8004a0c:	f021 0104 	bicge.w	r1, r1, #4
 8004a10:	6021      	strge	r1, [r4, #0]
 8004a12:	b90e      	cbnz	r6, 8004a18 <_printf_i+0x118>
 8004a14:	2d00      	cmp	r5, #0
 8004a16:	d04d      	beq.n	8004ab4 <_printf_i+0x1b4>
 8004a18:	4615      	mov	r5, r2
 8004a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a22:	5dc7      	ldrb	r7, [r0, r7]
 8004a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a28:	4637      	mov	r7, r6
 8004a2a:	42bb      	cmp	r3, r7
 8004a2c:	460e      	mov	r6, r1
 8004a2e:	d9f4      	bls.n	8004a1a <_printf_i+0x11a>
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d10b      	bne.n	8004a4c <_printf_i+0x14c>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	07de      	lsls	r6, r3, #31
 8004a38:	d508      	bpl.n	8004a4c <_printf_i+0x14c>
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	6861      	ldr	r1, [r4, #4]
 8004a3e:	4299      	cmp	r1, r3
 8004a40:	bfde      	ittt	le
 8004a42:	2330      	movle	r3, #48	; 0x30
 8004a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a4c:	1b52      	subs	r2, r2, r5
 8004a4e:	6122      	str	r2, [r4, #16]
 8004a50:	f8cd a000 	str.w	sl, [sp]
 8004a54:	464b      	mov	r3, r9
 8004a56:	aa03      	add	r2, sp, #12
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f7ff fee2 	bl	8004824 <_printf_common>
 8004a60:	3001      	adds	r0, #1
 8004a62:	d14c      	bne.n	8004afe <_printf_i+0x1fe>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	b004      	add	sp, #16
 8004a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6e:	4835      	ldr	r0, [pc, #212]	; (8004b44 <_printf_i+0x244>)
 8004a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a74:	6829      	ldr	r1, [r5, #0]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a7c:	6029      	str	r1, [r5, #0]
 8004a7e:	061d      	lsls	r5, r3, #24
 8004a80:	d514      	bpl.n	8004aac <_printf_i+0x1ac>
 8004a82:	07df      	lsls	r7, r3, #31
 8004a84:	bf44      	itt	mi
 8004a86:	f043 0320 	orrmi.w	r3, r3, #32
 8004a8a:	6023      	strmi	r3, [r4, #0]
 8004a8c:	b91e      	cbnz	r6, 8004a96 <_printf_i+0x196>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	f023 0320 	bic.w	r3, r3, #32
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	2310      	movs	r3, #16
 8004a98:	e7b0      	b.n	80049fc <_printf_i+0xfc>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f043 0320 	orr.w	r3, r3, #32
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	2378      	movs	r3, #120	; 0x78
 8004aa4:	4828      	ldr	r0, [pc, #160]	; (8004b48 <_printf_i+0x248>)
 8004aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004aaa:	e7e3      	b.n	8004a74 <_printf_i+0x174>
 8004aac:	0659      	lsls	r1, r3, #25
 8004aae:	bf48      	it	mi
 8004ab0:	b2b6      	uxthmi	r6, r6
 8004ab2:	e7e6      	b.n	8004a82 <_printf_i+0x182>
 8004ab4:	4615      	mov	r5, r2
 8004ab6:	e7bb      	b.n	8004a30 <_printf_i+0x130>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	6826      	ldr	r6, [r4, #0]
 8004abc:	6961      	ldr	r1, [r4, #20]
 8004abe:	1d18      	adds	r0, r3, #4
 8004ac0:	6028      	str	r0, [r5, #0]
 8004ac2:	0635      	lsls	r5, r6, #24
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	d501      	bpl.n	8004acc <_printf_i+0x1cc>
 8004ac8:	6019      	str	r1, [r3, #0]
 8004aca:	e002      	b.n	8004ad2 <_printf_i+0x1d2>
 8004acc:	0670      	lsls	r0, r6, #25
 8004ace:	d5fb      	bpl.n	8004ac8 <_printf_i+0x1c8>
 8004ad0:	8019      	strh	r1, [r3, #0]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	4615      	mov	r5, r2
 8004ad8:	e7ba      	b.n	8004a50 <_printf_i+0x150>
 8004ada:	682b      	ldr	r3, [r5, #0]
 8004adc:	1d1a      	adds	r2, r3, #4
 8004ade:	602a      	str	r2, [r5, #0]
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	6862      	ldr	r2, [r4, #4]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f7fb fb72 	bl	80001d0 <memchr>
 8004aec:	b108      	cbz	r0, 8004af2 <_printf_i+0x1f2>
 8004aee:	1b40      	subs	r0, r0, r5
 8004af0:	6060      	str	r0, [r4, #4]
 8004af2:	6863      	ldr	r3, [r4, #4]
 8004af4:	6123      	str	r3, [r4, #16]
 8004af6:	2300      	movs	r3, #0
 8004af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004afc:	e7a8      	b.n	8004a50 <_printf_i+0x150>
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	462a      	mov	r2, r5
 8004b02:	4649      	mov	r1, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	47d0      	blx	sl
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d0ab      	beq.n	8004a64 <_printf_i+0x164>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	079b      	lsls	r3, r3, #30
 8004b10:	d413      	bmi.n	8004b3a <_printf_i+0x23a>
 8004b12:	68e0      	ldr	r0, [r4, #12]
 8004b14:	9b03      	ldr	r3, [sp, #12]
 8004b16:	4298      	cmp	r0, r3
 8004b18:	bfb8      	it	lt
 8004b1a:	4618      	movlt	r0, r3
 8004b1c:	e7a4      	b.n	8004a68 <_printf_i+0x168>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4632      	mov	r2, r6
 8004b22:	4649      	mov	r1, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	47d0      	blx	sl
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d09b      	beq.n	8004a64 <_printf_i+0x164>
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	9903      	ldr	r1, [sp, #12]
 8004b32:	1a5b      	subs	r3, r3, r1
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dcf2      	bgt.n	8004b1e <_printf_i+0x21e>
 8004b38:	e7eb      	b.n	8004b12 <_printf_i+0x212>
 8004b3a:	2500      	movs	r5, #0
 8004b3c:	f104 0619 	add.w	r6, r4, #25
 8004b40:	e7f5      	b.n	8004b2e <_printf_i+0x22e>
 8004b42:	bf00      	nop
 8004b44:	08005bad 	.word	0x08005bad
 8004b48:	08005bbe 	.word	0x08005bbe

08004b4c <memmove>:
 8004b4c:	4288      	cmp	r0, r1
 8004b4e:	b510      	push	{r4, lr}
 8004b50:	eb01 0402 	add.w	r4, r1, r2
 8004b54:	d902      	bls.n	8004b5c <memmove+0x10>
 8004b56:	4284      	cmp	r4, r0
 8004b58:	4623      	mov	r3, r4
 8004b5a:	d807      	bhi.n	8004b6c <memmove+0x20>
 8004b5c:	1e43      	subs	r3, r0, #1
 8004b5e:	42a1      	cmp	r1, r4
 8004b60:	d008      	beq.n	8004b74 <memmove+0x28>
 8004b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b6a:	e7f8      	b.n	8004b5e <memmove+0x12>
 8004b6c:	4402      	add	r2, r0
 8004b6e:	4601      	mov	r1, r0
 8004b70:	428a      	cmp	r2, r1
 8004b72:	d100      	bne.n	8004b76 <memmove+0x2a>
 8004b74:	bd10      	pop	{r4, pc}
 8004b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b7e:	e7f7      	b.n	8004b70 <memmove+0x24>

08004b80 <_free_r>:
 8004b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b82:	2900      	cmp	r1, #0
 8004b84:	d044      	beq.n	8004c10 <_free_r+0x90>
 8004b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8a:	9001      	str	r0, [sp, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b92:	bfb8      	it	lt
 8004b94:	18e4      	addlt	r4, r4, r3
 8004b96:	f000 f913 	bl	8004dc0 <__malloc_lock>
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <_free_r+0x94>)
 8004b9c:	9801      	ldr	r0, [sp, #4]
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	b933      	cbnz	r3, 8004bb0 <_free_r+0x30>
 8004ba2:	6063      	str	r3, [r4, #4]
 8004ba4:	6014      	str	r4, [r2, #0]
 8004ba6:	b003      	add	sp, #12
 8004ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bac:	f000 b90e 	b.w	8004dcc <__malloc_unlock>
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d908      	bls.n	8004bc6 <_free_r+0x46>
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	1961      	adds	r1, r4, r5
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	bf01      	itttt	eq
 8004bbc:	6819      	ldreq	r1, [r3, #0]
 8004bbe:	685b      	ldreq	r3, [r3, #4]
 8004bc0:	1949      	addeq	r1, r1, r5
 8004bc2:	6021      	streq	r1, [r4, #0]
 8004bc4:	e7ed      	b.n	8004ba2 <_free_r+0x22>
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b10b      	cbz	r3, 8004bd0 <_free_r+0x50>
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d9fa      	bls.n	8004bc6 <_free_r+0x46>
 8004bd0:	6811      	ldr	r1, [r2, #0]
 8004bd2:	1855      	adds	r5, r2, r1
 8004bd4:	42a5      	cmp	r5, r4
 8004bd6:	d10b      	bne.n	8004bf0 <_free_r+0x70>
 8004bd8:	6824      	ldr	r4, [r4, #0]
 8004bda:	4421      	add	r1, r4
 8004bdc:	1854      	adds	r4, r2, r1
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	6011      	str	r1, [r2, #0]
 8004be2:	d1e0      	bne.n	8004ba6 <_free_r+0x26>
 8004be4:	681c      	ldr	r4, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	6053      	str	r3, [r2, #4]
 8004bea:	4421      	add	r1, r4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	e7da      	b.n	8004ba6 <_free_r+0x26>
 8004bf0:	d902      	bls.n	8004bf8 <_free_r+0x78>
 8004bf2:	230c      	movs	r3, #12
 8004bf4:	6003      	str	r3, [r0, #0]
 8004bf6:	e7d6      	b.n	8004ba6 <_free_r+0x26>
 8004bf8:	6825      	ldr	r5, [r4, #0]
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf04      	itt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	6063      	str	r3, [r4, #4]
 8004c06:	bf04      	itt	eq
 8004c08:	1949      	addeq	r1, r1, r5
 8004c0a:	6021      	streq	r1, [r4, #0]
 8004c0c:	6054      	str	r4, [r2, #4]
 8004c0e:	e7ca      	b.n	8004ba6 <_free_r+0x26>
 8004c10:	b003      	add	sp, #12
 8004c12:	bd30      	pop	{r4, r5, pc}
 8004c14:	200005b0 	.word	0x200005b0

08004c18 <sbrk_aligned>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4e0e      	ldr	r6, [pc, #56]	; (8004c54 <sbrk_aligned+0x3c>)
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	6831      	ldr	r1, [r6, #0]
 8004c20:	4605      	mov	r5, r0
 8004c22:	b911      	cbnz	r1, 8004c2a <sbrk_aligned+0x12>
 8004c24:	f000 f8bc 	bl	8004da0 <_sbrk_r>
 8004c28:	6030      	str	r0, [r6, #0]
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f8b7 	bl	8004da0 <_sbrk_r>
 8004c32:	1c43      	adds	r3, r0, #1
 8004c34:	d00a      	beq.n	8004c4c <sbrk_aligned+0x34>
 8004c36:	1cc4      	adds	r4, r0, #3
 8004c38:	f024 0403 	bic.w	r4, r4, #3
 8004c3c:	42a0      	cmp	r0, r4
 8004c3e:	d007      	beq.n	8004c50 <sbrk_aligned+0x38>
 8004c40:	1a21      	subs	r1, r4, r0
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 f8ac 	bl	8004da0 <_sbrk_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d101      	bne.n	8004c50 <sbrk_aligned+0x38>
 8004c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c50:	4620      	mov	r0, r4
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
 8004c54:	200005b4 	.word	0x200005b4

08004c58 <_malloc_r>:
 8004c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5c:	1ccd      	adds	r5, r1, #3
 8004c5e:	f025 0503 	bic.w	r5, r5, #3
 8004c62:	3508      	adds	r5, #8
 8004c64:	2d0c      	cmp	r5, #12
 8004c66:	bf38      	it	cc
 8004c68:	250c      	movcc	r5, #12
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	db01      	blt.n	8004c74 <_malloc_r+0x1c>
 8004c70:	42a9      	cmp	r1, r5
 8004c72:	d905      	bls.n	8004c80 <_malloc_r+0x28>
 8004c74:	230c      	movs	r3, #12
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	2600      	movs	r6, #0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c80:	4e2e      	ldr	r6, [pc, #184]	; (8004d3c <_malloc_r+0xe4>)
 8004c82:	f000 f89d 	bl	8004dc0 <__malloc_lock>
 8004c86:	6833      	ldr	r3, [r6, #0]
 8004c88:	461c      	mov	r4, r3
 8004c8a:	bb34      	cbnz	r4, 8004cda <_malloc_r+0x82>
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f7ff ffc2 	bl	8004c18 <sbrk_aligned>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	4604      	mov	r4, r0
 8004c98:	d14d      	bne.n	8004d36 <_malloc_r+0xde>
 8004c9a:	6834      	ldr	r4, [r6, #0]
 8004c9c:	4626      	mov	r6, r4
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	d140      	bne.n	8004d24 <_malloc_r+0xcc>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	eb04 0803 	add.w	r8, r4, r3
 8004cac:	f000 f878 	bl	8004da0 <_sbrk_r>
 8004cb0:	4580      	cmp	r8, r0
 8004cb2:	d13a      	bne.n	8004d2a <_malloc_r+0xd2>
 8004cb4:	6821      	ldr	r1, [r4, #0]
 8004cb6:	3503      	adds	r5, #3
 8004cb8:	1a6d      	subs	r5, r5, r1
 8004cba:	f025 0503 	bic.w	r5, r5, #3
 8004cbe:	3508      	adds	r5, #8
 8004cc0:	2d0c      	cmp	r5, #12
 8004cc2:	bf38      	it	cc
 8004cc4:	250c      	movcc	r5, #12
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f7ff ffa5 	bl	8004c18 <sbrk_aligned>
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d02b      	beq.n	8004d2a <_malloc_r+0xd2>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	442b      	add	r3, r5
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	e00e      	b.n	8004cf8 <_malloc_r+0xa0>
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	1b52      	subs	r2, r2, r5
 8004cde:	d41e      	bmi.n	8004d1e <_malloc_r+0xc6>
 8004ce0:	2a0b      	cmp	r2, #11
 8004ce2:	d916      	bls.n	8004d12 <_malloc_r+0xba>
 8004ce4:	1961      	adds	r1, r4, r5
 8004ce6:	42a3      	cmp	r3, r4
 8004ce8:	6025      	str	r5, [r4, #0]
 8004cea:	bf18      	it	ne
 8004cec:	6059      	strne	r1, [r3, #4]
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	bf08      	it	eq
 8004cf2:	6031      	streq	r1, [r6, #0]
 8004cf4:	5162      	str	r2, [r4, r5]
 8004cf6:	604b      	str	r3, [r1, #4]
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	f104 060b 	add.w	r6, r4, #11
 8004cfe:	f000 f865 	bl	8004dcc <__malloc_unlock>
 8004d02:	f026 0607 	bic.w	r6, r6, #7
 8004d06:	1d23      	adds	r3, r4, #4
 8004d08:	1af2      	subs	r2, r6, r3
 8004d0a:	d0b6      	beq.n	8004c7a <_malloc_r+0x22>
 8004d0c:	1b9b      	subs	r3, r3, r6
 8004d0e:	50a3      	str	r3, [r4, r2]
 8004d10:	e7b3      	b.n	8004c7a <_malloc_r+0x22>
 8004d12:	6862      	ldr	r2, [r4, #4]
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	bf0c      	ite	eq
 8004d18:	6032      	streq	r2, [r6, #0]
 8004d1a:	605a      	strne	r2, [r3, #4]
 8004d1c:	e7ec      	b.n	8004cf8 <_malloc_r+0xa0>
 8004d1e:	4623      	mov	r3, r4
 8004d20:	6864      	ldr	r4, [r4, #4]
 8004d22:	e7b2      	b.n	8004c8a <_malloc_r+0x32>
 8004d24:	4634      	mov	r4, r6
 8004d26:	6876      	ldr	r6, [r6, #4]
 8004d28:	e7b9      	b.n	8004c9e <_malloc_r+0x46>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f000 f84c 	bl	8004dcc <__malloc_unlock>
 8004d34:	e7a1      	b.n	8004c7a <_malloc_r+0x22>
 8004d36:	6025      	str	r5, [r4, #0]
 8004d38:	e7de      	b.n	8004cf8 <_malloc_r+0xa0>
 8004d3a:	bf00      	nop
 8004d3c:	200005b0 	.word	0x200005b0

08004d40 <_realloc_r>:
 8004d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d44:	4680      	mov	r8, r0
 8004d46:	4614      	mov	r4, r2
 8004d48:	460e      	mov	r6, r1
 8004d4a:	b921      	cbnz	r1, 8004d56 <_realloc_r+0x16>
 8004d4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4611      	mov	r1, r2
 8004d52:	f7ff bf81 	b.w	8004c58 <_malloc_r>
 8004d56:	b92a      	cbnz	r2, 8004d64 <_realloc_r+0x24>
 8004d58:	f7ff ff12 	bl	8004b80 <_free_r>
 8004d5c:	4625      	mov	r5, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d64:	f000 f838 	bl	8004dd8 <_malloc_usable_size_r>
 8004d68:	4284      	cmp	r4, r0
 8004d6a:	4607      	mov	r7, r0
 8004d6c:	d802      	bhi.n	8004d74 <_realloc_r+0x34>
 8004d6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d72:	d812      	bhi.n	8004d9a <_realloc_r+0x5a>
 8004d74:	4621      	mov	r1, r4
 8004d76:	4640      	mov	r0, r8
 8004d78:	f7ff ff6e 	bl	8004c58 <_malloc_r>
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d0ed      	beq.n	8004d5e <_realloc_r+0x1e>
 8004d82:	42bc      	cmp	r4, r7
 8004d84:	4622      	mov	r2, r4
 8004d86:	4631      	mov	r1, r6
 8004d88:	bf28      	it	cs
 8004d8a:	463a      	movcs	r2, r7
 8004d8c:	f7ff fbb8 	bl	8004500 <memcpy>
 8004d90:	4631      	mov	r1, r6
 8004d92:	4640      	mov	r0, r8
 8004d94:	f7ff fef4 	bl	8004b80 <_free_r>
 8004d98:	e7e1      	b.n	8004d5e <_realloc_r+0x1e>
 8004d9a:	4635      	mov	r5, r6
 8004d9c:	e7df      	b.n	8004d5e <_realloc_r+0x1e>
	...

08004da0 <_sbrk_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4d06      	ldr	r5, [pc, #24]	; (8004dbc <_sbrk_r+0x1c>)
 8004da4:	2300      	movs	r3, #0
 8004da6:	4604      	mov	r4, r0
 8004da8:	4608      	mov	r0, r1
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	f7fc fc58 	bl	8001660 <_sbrk>
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	d102      	bne.n	8004dba <_sbrk_r+0x1a>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	b103      	cbz	r3, 8004dba <_sbrk_r+0x1a>
 8004db8:	6023      	str	r3, [r4, #0]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	200005b8 	.word	0x200005b8

08004dc0 <__malloc_lock>:
 8004dc0:	4801      	ldr	r0, [pc, #4]	; (8004dc8 <__malloc_lock+0x8>)
 8004dc2:	f000 b811 	b.w	8004de8 <__retarget_lock_acquire_recursive>
 8004dc6:	bf00      	nop
 8004dc8:	200005bc 	.word	0x200005bc

08004dcc <__malloc_unlock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_unlock+0x8>)
 8004dce:	f000 b80c 	b.w	8004dea <__retarget_lock_release_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	200005bc 	.word	0x200005bc

08004dd8 <_malloc_usable_size_r>:
 8004dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ddc:	1f18      	subs	r0, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bfbc      	itt	lt
 8004de2:	580b      	ldrlt	r3, [r1, r0]
 8004de4:	18c0      	addlt	r0, r0, r3
 8004de6:	4770      	bx	lr

08004de8 <__retarget_lock_acquire_recursive>:
 8004de8:	4770      	bx	lr

08004dea <__retarget_lock_release_recursive>:
 8004dea:	4770      	bx	lr

08004dec <_init>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	bf00      	nop
 8004df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df2:	bc08      	pop	{r3}
 8004df4:	469e      	mov	lr, r3
 8004df6:	4770      	bx	lr

08004df8 <_fini>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr
